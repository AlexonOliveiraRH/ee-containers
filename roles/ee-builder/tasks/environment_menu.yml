---
# Add this at the beginning to prevent duplicate menu displays
- name: Check if menu has already been displayed
  ansible.builtin.set_fact:
    menu_already_displayed: "{{ menu_already_displayed | default(false) }}"

# Use a variable for the environments path to ensure consistency
- name: Set environments path
  ansible.builtin.set_fact:
    environments_path: "{{ playbook_dir }}/environments"
  when: not menu_already_displayed

# Scan environments directory BEFORE showing menu
- name: Scan environments directory
  ansible.builtin.find:
    paths: "{{ environments_path }}"
    file_type: directory
    excludes: "general"
  register: environment_dirs
  when: not menu_already_displayed

# Group environments by OS type BEFORE menu
- name: Group environments by OS type
  ansible.builtin.set_fact:
    rhel8_environments: "{{ environment_dirs.files | selectattr('path', 'search', 'rhel8') | map(attribute='path') | map('basename') | list }}"
    rhel9_environments: "{{ environment_dirs.files | selectattr('path', 'search', 'rhel9') | map(attribute='path') | map('basename') | list }}"
  when: not menu_already_displayed

# Only show the menu if it hasn't been displayed yet
- name: Show menu block
  block:
    # Clear the screen first
    - name: Clear screen
      ansible.builtin.shell: clear
      changed_when: false
      ignore_errors: true
    
    # Initialize environments_to_build
    - name: Initialize environments_to_build variable
      ansible.builtin.set_fact:
        environments_to_build: []

    # First, create a file with the banner
    - name: Create ASCII art banner file
      ansible.builtin.copy:
        dest: "/tmp/ee-banner.txt"
        content: |
              ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
              │                                                                                      ..:-=@@@@=-:..          │
              │                                                                                    .*%@@@@@@@@@@@@%*.        │
              │                                                                                 .:@@@@@@@@@@@@@@@@@@@@:.     │
              │                                                                                .*@@@@@@@@@@*-@@@@@@@@@@*.    │
              │                                                                               .@@@@@@@@@@@*. =@@@@@@@@@@@.   │
              │                                                                              .%@@@@@@@@@@@ .@ +@@@@@@@@@@%.  │
              │                                                                              -%@@@@@@@@@@..@%-.*@@@@@@@@@%-  │
              │     "A Streamlined Approach to Building Ansible Execution Environments"   .+@@@@@@@@@@= =@@@.:@@@@@@@@@@+. │
              │                                                                             .+@@@@@@@@@@ ..:+@%.-@@@@@@@@@+. │
              │                                                                             .=@@@@@@@@@ .@@+. *+.-@@@@@@@%=  │
              │                                                                              .%@@@@@@@:.*@@@@%.  .+@@@@@@%.  │
              │                                                                               .@@@@@@= =@@@@@@@%=.:%@@@@@.   │
              │                                                                                :%@@@@@@@@@@@@@@@@@@@@@@%:    │
              │                                                                                 .*@@@@@@@@@@@@@@@@@@@@*.     │
              │                                                                                   .+@@@@@@@@@@@@@@@@+..      │
              │                                                                                     ..+*%@@@@@@%*+..         │
              └──────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
        mode: '0644'

    # Then display it using cat (KEEPING THIS TASK AS REQUESTED)
    - name: Display ASCII art banner
      ansible.builtin.command: "cat /tmp/ee-banner.txt"
      register: banner_output

    # Print the banner output directly
    - name: Echo banner output
      ansible.builtin.debug:
        msg: "{{ banner_output.stdout_lines }}"

    - name: Pause for 3 seconds to let users view the banner
      ansible.builtin.pause:
        seconds: 3

    # First menu - OS selection
    - name: Prompt for OS selection
      ansible.builtin.pause:
        prompt: |
          
          ***********************************************************
          
          ENVIRONMENT SELECTION MENU:
          ==========================
          
          1. RHEL 8 ENVIRONMENTS ({{ rhel8_environments | length }} found)
          2. RHEL 9 ENVIRONMENTS ({{ rhel9_environments | length }} found)
          3. ALL ENVIRONMENTS ({{ rhel8_environments | length + rhel9_environments | length }} total)
          
          ***********************************************************
          >>> SELECT AN OPTION (1, 2, 3, or "ALL")
      register: os_selection

    # Set OS type variable with support for "ALL"
    - name: Set selected OS type
      ansible.builtin.set_fact:
        selected_os_type: "{{ '3' if os_selection.user_input | upper == 'ALL' else os_selection.user_input | default('3') }}"

    # RHEL 8 second menu
    - name: Prompt for RHEL 8 environment selection
      ansible.builtin.pause:
        prompt: |
          
          RHEL 8 environment Options
          {% for env in rhel8_environments | sort %}
          {{ loop.index }}. {{ env }}
          {% endfor %}
          
          >>> Select RHEL 8 environments (comma-separated numbers, "{{ rhel8_environments | length + 1 }}", or "ALL" for all)
      register: rhel8_selection
      when: selected_os_type == "1"

    # RHEL 9 second menu
    - name: Prompt for RHEL 9 environment selection
      ansible.builtin.pause:
        prompt: |
          
          RHEL 9 environment Options
          {% for env in rhel9_environments | sort %}
          {{ loop.index }}. {{ env }}
          {% endfor %}
          
          >>> Select RHEL 9 environments (comma-separated numbers, "{{ rhel9_environments | length + 1 }}", or "ALL" for all)
      register: rhel9_selection
      when: selected_os_type == "2"

    # Process selections
    - name: Select ALL environments 
      ansible.builtin.set_fact:
        environments_to_build: "{{ rhel8_environments + rhel9_environments }}"
      when: selected_os_type == "3"

    - name: Process RHEL 8 selections
      block:
        - name: Process all RHEL 8 environments
          ansible.builtin.set_fact:
            environments_to_build: "{{ rhel8_environments }}"
          when: >
            rhel8_selection.user_input == "" or 
            rhel8_selection.user_input | string == (rhel8_environments | length + 1) | string or
            rhel8_selection.user_input | upper == "ALL"
          
        - name: Process specific RHEL 8 environments
          block:
            - name: Convert selection string to list of indexes
              ansible.builtin.set_fact:
                selected_indexes: "{{ rhel8_selection.user_input.split(',') | map('trim') | map('int') | list }}"
            
            - name: Add selected RHEL 8 environments
              ansible.builtin.set_fact:
                environments_to_build: "{{ environments_to_build + [rhel8_environments[item-1]] }}"
              loop: "{{ selected_indexes }}"
              when: item <= (rhel8_environments | length)
          when: rhel8_selection.user_input != "" and rhel8_selection.user_input | string != (rhel8_environments | length + 1) | string
      when: selected_os_type == "1"

    - name: Process RHEL 9 selections
      block:
        - name: Process all RHEL 9 environments
          ansible.builtin.set_fact:
            environments_to_build: "{{ rhel9_environments }}"
          when: >
            rhel9_selection.user_input == "" or 
            rhel9_selection.user_input | string == (rhel9_environments | length + 1) | string or
            rhel9_selection.user_input | upper == "ALL"
          
        - name: Process specific RHEL 9 environments
          block:
            - name: Convert selection string to list of indexes
              ansible.builtin.set_fact:
                selected_indexes: "{{ rhel9_selection.user_input.split(',') | map('trim') | map('int') | list }}"
            
            - name: Add selected RHEL 9 environments
              ansible.builtin.set_fact:
                environments_to_build: "{{ environments_to_build + [rhel9_environments[item-1]] }}"
              loop: "{{ selected_indexes }}"
              when: item <= (rhel9_environments | length)
          when: rhel9_selection.user_input != "" and rhel9_selection.user_input | string != (rhel9_environments | length + 1) | string
      when: selected_os_type == "2"

    # Show confirmation
    - name: Confirm selection
      ansible.builtin.debug:
        msg: |
          
          ================================================
          ENVIRONMENTS TO BUILD: {{ environments_to_build | join(', ') }}
          ================================================

    # Mark menu as displayed
    - name: Mark menu as displayed
      ansible.builtin.set_fact:
        menu_already_displayed: true
  
  when: not menu_already_displayed
