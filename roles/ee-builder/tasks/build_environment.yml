---
####################################
# 1. INITIALIZATION AND SETUP
####################################

- name: Install required Python packages for filters
  ansible.builtin.pip:
    name: jmespath
    state: present
  become: true
  tags:
    - setup
    - dependencies
    - python_packages

# Add this task near the beginning of your playbook (after the pip install task)
- name: Install required Ansible collections for filters
  ansible.builtin.command: ansible-galaxy collection install community.general
  changed_when: false
  ignore_errors: true
  tags:
    - setup
    - dependencies
    - ansible_collections

- name: Generate timestamp for image tag
  ansible.builtin.set_fact:
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
  tags:
    - setup
    - timestamp
    - always

- name: Initialize environment_configs if not defined
  ansible.builtin.set_fact:
    environment_configs: {}
  when: environment_configs is undefined

- name: Set OS type for environments
  ansible.builtin.set_fact:
    os_type: "{{ 'rhel8' if (environments_to_build | default([]) | select('search', 'rhel8') | list | length > 0) else 'rhel9' }}"

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ dir_paths.ansible_config }}"
    - "{{ dir_paths.hooks }}"
    - "{{ dir_paths.context }}"
    - "{{ dir_paths.context }}/hooks"
    - "{{ dir_paths.build }}"
    - "{{ dir_paths.containerfiles }}"
  become: true

- name: Create Ansible configuration files
  ansible.builtin.copy:
    dest: "{{ item.path }}"
    content: "{{ item.content }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - path: "/tmp/ansible_safe/ansible.cfg"
      content: |
        [defaults]
        ansible_log_path = /tmp/ee-containers/ansible.log
        # rest of the ansible.cfg content...
    - path: "/tmp/ansible_safe/inventory"
      content: |
        [local]
        localhost ansible_connection=local
  become: true

- name: Set Ansible environment variables
  ansible.builtin.shell: |
    export ANSIBLE_CONFIG=/tmp/ansible_safe/ansible.cfg
    export ANSIBLE_INVENTORY=/tmp/ansible_safe/inventory
    export ANSIBLE_HOST_KEY_CHECKING=False
    export ANSIBLE_DEPRECATION_WARNINGS=False
    export ANSIBLE_COMMAND_WARNINGS=False
    export ANSIBLE_SYSTEM_WARNINGS=False
  changed_when: false

- name: Debug playbook directory
  ansible.builtin.debug:
    msg: "Playbook directory: {{ playbook_dir }}"

- name: Synchronize environments from playbook directory to working directory
  ansible.builtin.synchronize:
    src: "{{ playbook_dir }}/environments/"
    dest: "/tmp/ee-containers/environments/"
    delete: no
    archive: yes
    checksum: yes
    recursive: yes
  delegate_to: "{{ inventory_hostname }}"
  become: true
  register: env_synced

- name: Check if environment directories exist
  ansible.builtin.stat:
    path: "{{ paths.environments }}/{{ item }}"
  loop: "{{ environments_to_build | default([]) }}"
  register: env_exists
  when: environments_to_build is defined

- name: Debug environments_to_build list
  ansible.builtin.debug:
    msg: "Selected environments: {{ environments_to_build | join(', ') }}"
    verbosity: 1

####################################
# 2. ENVIRONMENT VALIDATION
####################################

# IMPORTANT: This must come before any tasks that use env_exists

- name: Check if environments directory exists
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/environments"
  register: env_dir_exists

- name: Fail if environments directory doesn't exist
  ansible.builtin.fail:
    msg: "Environments directory not found at {{ playbook_dir }}/environments"
  when: not env_dir_exists.stat.exists

# 

# CONSOLIDATED: Check for execution-environment.yml files
- name: Check if execution-environment.yml exists for each environment
  ansible.builtin.stat:
    path: "/tmp/ee-containers/environments/{{ item.item }}/execution-environment.yml"
  loop: "{{ env_exists.results }}"
  when: item.stat.exists and item.stat.isdir
  register: ee_yml_exists

- name: Warn about missing execution-environment.yml files
  ansible.builtin.debug:
    msg: "WARNING: No execution-environment.yml found for {{ item.item.item }}. This environment will be skipped."
  loop: "{{ ee_yml_exists.results }}"
  when: 
    - item is defined 
    - (item.stat is defined and not item.stat.exists) or item.skipped is defined
  loop_control:
    label: "{{ item.item.item if item.item is defined else 'unknown' }}"

####################################
# 3. REGISTRY AUTHENTICATION
####################################

- name: Create system-wide auth file for podman
  ansible.builtin.copy:
    dest: "{{ registry.redhat.auth_file }}"
    mode: "0644"
    content: |
      {
        "auths": {
          "{{ registry.redhat.url }}": {
            "auth": "{{ (rh_username + ':' + rh_password) | b64encode }}",
            "username": "{{ rh_username }}",
            "password": "{{ rh_password }}"
          }
        }
      }
  become: true
  no_log: true
  register: auth_create
  when: 
    - rh_username is defined and rh_username != ""
    - rh_password is defined and rh_password != ""

- name: Create simplified registries.conf
  ansible.builtin.copy:
    dest: "/etc/containers/registries.conf"
    content: |
      [registries.search]
      registries = ['registry.access.redhat.com', 'registry.redhat.io', 'docker.io', 'quay.io']
      
      [registries.insecure]
      registries = []
      
      [registries.block]
      registries = []
    mode: '0644'
  become: true

- name: Test registry authentication
  ansible.builtin.command:
    cmd: "podman pull registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest"
  register: auth_test
  changed_when: false
  ignore_errors: true

- name: Display auth test results
  ansible.builtin.debug:
    msg: "Authentication test result: {{ 'SUCCESS' if auth_test.rc == 0 else 'FAILED - ' + auth_test.stderr }}"

####################################
# 4. PREPARE ENVIRONMENT FILES
####################################

- name: Load variables from config file
  ansible.builtin.include_vars:
    file: "~/.ansible/vars/config"
    name: config_vars
  ignore_errors: true

- name: Create ansible.cfg file from template if not exists
  ansible.builtin.template:
    src: "{{ role_path }}/templates/ansible.cfg.j2"
    dest: "/tmp/ee-containers/ansible.cfg"
    mode: '0644'
    force: no
  vars:
    ansible_vars: "{{ config_vars | default({}) }}"

- name: Copy ansible.cfg to each environment
  ansible.builtin.copy:
    src: "/tmp/ee-containers/ansible.cfg"
    dest: "/tmp/ee-containers/environments/{{ item }}/ansible.cfg"
    mode: '0644'
  loop: "{{ environments_to_build }}"

- name: Create requirements.txt for each environment (if needed)
  ansible.builtin.copy:
    dest: "/tmp/ee-containers/environments/{{ item }}/requirements.txt"
      # No requirements specified
    mode: "0644"
    force: false
  loop: "{{ environments_to_build }}"
  failed_when: false

####################################
# 5. CREATE HELPER SCRIPTS
####################################

# Copy pre-built custom assemble script
- name: Copy custom assemble script
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/ee-builder/scripts/custom-assemble.sh"
    dest: "/tmp/ee-containers/custom-assemble.sh"
    mode: "0755"

- name: Create Containerfile template with version 3 compatibility
  ansible.builtin.copy:
    dest: "/tmp/ee-containers/containerfiles/Containerfile.j2"
    mode: "0644"
    content: |
      FROM {{ '{{' }} base_image {{ '}}' }} AS base
      USER root
      ENV PIP_BREAK_SYSTEM_PACKAGES=1
      
      # Fix missing package managers
      RUN if [ ! -f /usr/bin/dnf ] && [ -f /usr/bin/microdnf ]; then \
            ln -s /usr/bin/microdnf /usr/bin/dnf || true; \
          fi
      
      # Version 3 builder configuration
      ARG EE_BASE_IMAGE
      ARG PYCMD=python3
      ARG PKGMGR=dnf
      ARG ANSIBLE_GALAXY_CLI_COLLECTION_OPTS
      ARG ANSIBLE_GALAXY_CLI_ROLE_OPTS
      
      COPY _build/scripts/ /output/scripts/
      COPY _build/scripts/entrypoint /opt/builder/bin/entrypoint

      # Install Python requirements and collections
      COPY --chown=root:root ansible.cfg /etc/ansible/ansible.cfg
      RUN /output/scripts/assemble

# Copy pre-built hook script from scripts directory
- name: Copy pre-build hook
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/ee-builder/scripts/hooks/pre-build"
    dest: "{{ paths.hooks }}/pre-build"
    mode: "0755"

####################################
# 6. FIX EXECUTION ENVIRONMENT YAML FILES
####################################

# Add this task FIRST in the section to find all the execution-environment.yml files
- name: Find all execution-environment.yml files
  ansible.builtin.find:
    paths: "/tmp/ee-containers/environments"
    patterns: "execution-environment.yml"
    recurse: yes
  register: ee_yml_files

# FIRST run validation to capture which files have YAML errors
- name: Verify execution-environment.yml files are properly formatted
  ansible.builtin.command:
    cmd: python3 -c "import yaml; yaml.safe_load(open('{{ item.path }}'))"
  loop: "{{ ee_yml_files.files }}"
  register: yaml_validation
  ignore_errors: true
  changed_when: false

# Then keep your existing tasks
- name: Create backup directory for original files
  ansible.builtin.file:
    path: "/tmp/ee-containers/backups"
    state: directory
    mode: "0755"

- name: Back up all execution-environment.yml files
  ansible.builtin.shell: |
    for file in $(find /tmp/ee-containers -name "execution-environment.yml"); do
      cp "$file" "/tmp/ee-containers/backups/$(basename $(dirname $file))-execution-environment.yml"
    done
  changed_when: true

# THEN fix the broken files based on validation results
- name: Force-fix all execution-environment.yml files
  ansible.builtin.copy:
    dest: "{{ item.path }}"
    content: |
      ---
      version: 3
      
      build_arg_defaults:
        ANSIBLE_GALAXY_CLI_COLLECTION_OPTS: '--ignore-errors'
        ANSIBLE_GALAXY_CLI_ROLE_OPTS: '--ignore-errors'
      
      images:
        base_image:
          name: 'registry.redhat.io/ansible-automation-platform-25/ee-{% if "minimal" in item.path %}minimal{% else %}supported{% endif %}-rhel{% if "rhel8" in item.path %}8{% else %}9{% endif %}:latest'
      
      options:
        package_manager_path: /usr/bin/microdnf
      
      dependencies:
        python: requirements.txt
        system: bindep.txt
        galaxy: requirements.yml
    mode: '0644'
  loop: "{{ ee_yml_files.files }}"
  when: 
    - item.path.endswith('execution-environment.yml')
    - item.path in (yaml_validation.results | selectattr('rc', 'defined') | rejectattr('rc', 'eq', 0) | map(attribute='item.path') | list)
  ignore_errors: true
    

- name: Verify execution-environment.yml files are properly formatted
  ansible.builtin.command:
    cmd: python3 -c "import yaml; yaml.safe_load(open('{{ item.path }}'))"
  loop: "{{ ee_yml_files.files }}"
  register: yaml_validation
  ignore_errors: true
  changed_when: false

- name: Display validation results for execution-environment.yml files
  ansible.builtin.debug:
    msg: |
      Valid YAML files: {{ yaml_validation.results | selectattr('rc', 'defined') | selectattr('rc', 'eq', 0) | list | length }}
      Invalid YAML files: {{ yaml_validation.results | selectattr('rc', 'defined') | rejectattr('rc', 'eq', 0) | list | length }}
      {% if yaml_validation.results | selectattr('rc', 'defined') | rejectattr('rc', 'eq', 0) | list | length > 0 %}
      Warning: Some files still have YAML errors. The build may fail.
      {% endif %}

####################################
# 7. GENERATE CUSTOM CONTAINERFILES
####################################

- name: Copy custom assemble script to context directory
  ansible.builtin.copy:
    dest: "/tmp/ee-containers/context/_build/scripts/assemble"
    src: "/tmp/ee-containers/custom-assemble.sh"
    mode: "0755"
  ignore_errors: true

# CONSOLIDATED: Generate custom Containerfile for each environment
- name: Generate custom Containerfile for each environment
  ansible.builtin.template:
    src: "Containerfile.j2"
    dest: "{{ paths.environments }}/{{ item.item }}/Containerfile"
    mode: "0644"
  vars:
    ee_file_path: "{{ paths.environments }}/{{ item.item }}/execution-environment.yml"
    base_image: "{{ lookup('file', ee_file_path, errors='ignore') | default('version: 3') | from_yaml | json_query('images.base_image.name') | default('registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest') }}"
  loop: "{{ env_exists.results }}"
  when: item.stat.exists and item.stat.isdir
  register: containerfile_gen

- name: Verify environments before building
  ansible.builtin.shell: |
    echo "Checking if {{ item.item }} environment still exists..."
    if [ -d "/tmp/ee-containers/environments/{{ item.item }}" ]; then
      echo "Directory exists"
      ls -la /tmp/ee-containers/environments/{{ item.item }}
      if [ -f "/tmp/ee-containers/environments/{{ item.item }}/execution-environment.yml" ]; then
        echo "execution-environment.yml found"
        cat /tmp/ee-containers/environments/{{ item.item }}/execution-environment.yml
      else
        echo "execution-environment.yml NOT found"
      fi
    else
      echo "Directory does NOT exist"
    fi
  loop: "{{ env_exists.results }}"
  register: env_check_results
  changed_when: false
  when: item.stat.exists and item.stat.isdir

####################################
# 8. BUILD IMAGES
####################################

# Copy pre-built assemble script from scripts directory
- name: Copy modified assemble script
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/ee-builder/scripts/build/assemble"
    dest: "{{ paths.build }}"
    mode: "0755"

- name: Start image build process with custom hooks
  ansible.builtin.shell: |
    export REGISTRY_AUTH_FILE=/etc/containers/auth.json
    cd /tmp/ee-containers/environments/{{ item.item }}
    
    # Print debug information
    echo "Building from $(pwd)"
    echo "Current auth file: $REGISTRY_AUTH_FILE"
    echo "Files in current directory:"
    ls -la
    echo "Contents of execution-environment.yml:"
    cat execution-environment.yml || echo "File not found!"
    echo "Contents of Containerfile:"
    cat Containerfile || echo "File not found!"
    
    if [ ! -f "Containerfile" ]; then
      echo "ERROR: Containerfile missing, generating default"
      echo "FROM registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest" > Containerfile
    fi
    
    # Run with verbose output and custom containerfile
    ansible-builder build --no-cache -v3 \
      --tag {{ item.item }}:{{ timestamp }} \
      --container-runtime podman \
      --file ./Containerfile \
      --context /tmp/ee-containers/context
      
    # Clean up processes that might be stuck
    echo "Killing any stuck processes..."
    pkill -9 fuse-overlayfs 2>/dev/null || true
    pkill -9 systemd-udevd 2>/dev/null || true
    sleep 1
    
    # Clean up dangling images after each build
    echo "Cleaning up dangling images..."
    podman image ls -a | grep '<none>' | awk '{print $3}' | xargs -r podman rmi -f || true
    echo "Cleanup complete."
  environment:
    REGISTRY_AUTH_FILE: "/etc/containers/auth.json"
  loop: "{{ env_exists.results }}"
  when: item.stat.exists and item.stat.isdir
  register: build_results
  ignore_errors: true

####################################
# 9. CLEANUP AND REPORTING
####################################

- name: Initialize build_results if no builds ran
  ansible.builtin.set_fact:
    build_results: {"results": []}
  when: build_results is not defined or build_results.results | length == 0

- name: Count build successes and failures
  ansible.builtin.set_fact:
    successful_builds: "{{ build_results.results | default([]) | selectattr('rc', 'defined') | selectattr('rc', 'eq', 0) | list | length }}"
    failed_builds: "{{ build_results.results | default([]) | selectattr('rc', 'defined') | rejectattr('rc', 'eq', 0) | list | length }}"
    skipped_builds: "{{ build_results.results | default([]) | selectattr('skipped', 'defined') | list | length }}"
    total_environments: "{{ environments_to_build | length }}"

- name: Remove all dangling images
  ansible.builtin.shell: |
    podman image ls -a | grep '<none>' | awk '{print $3}' | xargs -r podman rmi -f || true
  ignore_errors: true

- name: Show build summary
  ansible.builtin.debug:
    msg: |
      
      ********************************************************************
      *                     BUILD SUMMARY REPORT                         *
      ********************************************************************
      
      Total environments selected: {{ total_environments }}
      Successfully built: {{ successful_builds }}
      Failed builds: {{ failed_builds }}
      Skipped builds: {{ skipped_builds }}
      
      DETAILED RESULTS:
      {% for result in build_results.results %}
      {% if result.skipped is defined %}
      - SKIPPED: {{ result.item.item }} - Missing execution-environment.yml
      {% elif result.rc is defined and result.rc == 0 %}
      - SUCCESS: {{ result.item.item }} - Image tag: {{ result.item.item }}:{{ timestamp }}
      {% elif result.rc is defined %}
      - FAILED: {{ result.item.item }} - Error code: {{ result.rc }}
      {% endif %}
      {% endfor %}
      
      {% if successful_builds != 0 %}
      Successfully built containers are available with 'podman images'
      {% endif %}






