---
# Validate required variables before proceeding
- name: Ensure required variables are defined
  ansible.builtin.assert:
    that:
      - environments_to_build is defined
      - environments_to_build is not none
    quiet: true
  ignore_errors: true
  register: var_check

# Create tmux header file first (before any other tmux operations)
- name: Create tmux header file
  ansible.builtin.template:
    src: "{{ tmux.header_template }}"
    dest: "{{ paths.tmux.header }}"
    mode: 0644

- name: Ensure monitoring directory exists
  ansible.builtin.file:
    path: "{{ paths.base }}"
    state: directory
    mode: 0755
  when: var_check is succeeded

# Detect platform for appropriate terminal handling
- name: Detect operating system
  ansible.builtin.set_fact:
    os_type: "{{ ansible_facts['os_family'] | lower }}"
    is_wsl: false
  when: var_check is succeeded

# WSL detection
- name: Detect if running in WSL
  ansible.builtin.shell: grep -q microsoft /proc/version || grep -q WSL /proc/version || grep -q Microsoft /proc/sys/kernel/osrelease
  register: wsl_check
  failed_when: false
  changed_when: false
  ignore_errors: true
  when: var_check is succeeded

- name: Set WSL flag if detected
  ansible.builtin.set_fact:
    is_wsl: true
  when: 
    - var_check is succeeded
    - wsl_check is defined 
    - wsl_check.rc is defined
    - wsl_check.rc == 0

# Set default values for undefined variables
- name: Set default values for variables
  ansible.builtin.set_fact:
    environment_display_name: "{{ environments_to_build | join(', ') if environments_to_build is defined else 'No environment' }}"
    selected_environments: "{{ environments_to_build | default([]) }}"
  when: var_check is succeeded

# Create tmux monitor script
# Copy pre-built monitor script
- name: Copy tmux monitor script
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/ee-builder/scripts/build_monitor.sh"
    dest: "{{ paths.scripts }}/{{ tmux.monitor_script }}"
    mode: "0755"
  when: var_check is succeeded

# Create build status with attractive formatting and better error handling
- name: Create build status file for monitor
  ansible.builtin.copy:
    dest: "{{ paths.status_file }}"
    content: |
      {{ templates.status_header }}
      
      üïí Started at: {{ ansible_date_time.iso8601 }}
      üè∑Ô∏è Environment: {{ environment_display_name }}
      üìã Selected environments ({{ environments_to_build | default([]) | length }}):
      {% if environments_to_build is defined and environments_to_build %}
      {% for env in environments_to_build %}
      ‚ñ∂Ô∏è {{ env }}
      {% endfor %}
      {% else %}
      ‚ö†Ô∏è No environments selected
      {% endif %}
      
      üì¨ Status: Build will start momentarily...
    mode: 0644
  register: status_file
  when: var_check is succeeded
  failed_when: false

# Create status header file
- name: Create status header file
  ansible.builtin.copy:
    dest: "{{ paths.status_file }}"
    content: |
      {{ templates.status_header }}
    mode: "0644"

# OPTION 1: If the script already exists in your scripts directory (preferred)
- name: Copy fix_ee_files script
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/ee-builder/scripts/fix_ee_files.sh"
    dest: "/tmp/ee-containers/fix_ee_files.sh"
    mode: "0755"
  when: var_check is succeeded

# OR OPTION 2: If you want to create the script with inline content
# - name: Create fix_ee_files script
#   ansible.builtin.copy:
#     dest: "/tmp/ee-containers/fix_ee_files.sh"
#     mode: "0755"
#     content: |
#       #!/usr/bin/env python3
#       import os
#       import re
#       import sys
#       import yaml
#       
#       # Rest of your Python script content...
#   when: var_check is succeeded

- name: Run Python fix script
  ansible.builtin.command:
    cmd: "python3 /tmp/ee-containers/fix_ee_files.py"
  register: python_fix
  changed_when: "'Fixed' in python_fix.stdout"
  failed_when: false
  when: var_check is succeeded

- name: Display Python fix results
  ansible.builtin.debug:
    msg: "{{ python_fix.stdout_lines }}"
  when: var_check is succeeded and python_fix is defined and python_fix.stdout_lines is defined

# Create simple access script for convenience
- name: Create simple access script
  ansible.builtin.copy:
    dest: "/tmp/podman-monitor.sh"
    mode: 0755
    content: |
      #!/bin/bash
      echo -e "\033[1;32mConnecting to podman monitoring session...\033[0m"
      tmux attach -t podman_monitor
  when: var_check is succeeded

# Show instructions for accessing monitor
- name: Show instructions for accessing monitor
  ansible.builtin.debug:
    msg: |
      üîç Podman monitoring session created for {{ environment_display_name }}
      
      To view the monitoring session:
      1. Run in any terminal: tmux attach -t podman_monitor
      2. Or run: /tmp/podman-monitor.sh
  when: var_check is succeeded
