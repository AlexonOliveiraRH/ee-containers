- name: Display title screen
  hosts: localhost
  connection: local  # Add this line to prevent SSH connection attempt
  gather_facts: false
  environment:
    ANSIBLE_LOCALHOST_WARNING: "False" 
    ANSIBLE_DEPRECATION_WARNINGS: "False"
    ANSIBLE_COMMAND_WARNINGS: "False"
    ANSIBLE_SYSTEM_WARNINGS: "False"
  tasks:
    - name: Clear screen before showing title
      ansible.builtin.shell: clear
      changed_when: false
      
    - name: Show title
      ansible.builtin.debug:
        msg: |
          ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
          │                                                                                      ..:-=*##*=-:..          │
          │                                                                                    .*%@@@@@@@@@@@@%*.        │
          │                                                                                 .:#@@@@@@@@@@@@@@@@@@#:.     │
          │                                                                                .*@@@@@@@@@@*-@@@@@@@@@@*.    │
          │                                                                               .#@@@@@@@@@@*. =@@@@@@@@@@#.   │
          │                                                                              .%@@@@@@@@@@@ .# +@@@@@@@@@@%.  │
          │                                                                              -%@@@@@@@@@@..#%-.*@@@@@@@@@%-  │
          │     "A Streamlined Approach to Building Ansible Execution Environments"     .+@@@@@@@@@@= =@@@.:#@@@@@@@@@+. │
          │                                                                             .+@@@@@@@@@# ..:+@%.-@@@@@@@@@+. │
          │                                                                             .=@@@@@@@@@ .@@+. *+.-@@@@@@@%=  │
          │                                                                              .%@@@@@@@:.*@@@@%.  .+@@@@@@%.  │
          │                                                                               .@@@@@@= =@@@@@@@%=.:%@@@@@.   │
          │                                                                                :%@@@@@@@@@@@@@@@@@@@@@@%:    │
          │                                                                                 .*@@@@@@@@@@@@@@@@@@@@*.     │
          │                                                                                   .+@@@@@@@@@@@@@@@@+..      │
          │                                                                                     ..+*%@@@@@@%*+..         │
          └──────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

    - name: Pause for title screen
      ansible.builtin.pause:
        seconds: 7
        prompt: "Starting Execution Environment Builder..."

- name: Build Execution Environments for Ansible Automation Platform
  hosts: localhost
  become: true
  gather_facts: true  # Ensure we have facts for ansible_env variables

  vars:
    container_registries:
      - registry.redhat.io
      - console.redhat.com
      - registry.access.redhat.com
      - quay.io
      - registry.connect.redhat.com
    dns_servers:
      - '8.8.8.8'
      - '8.8.4.4'
    required_packages:
      - python3-pip
      - ansible-builder
      - ansible-core
      - git
      - podman
      - podman-docker
      - tmux
      - yum-utils
    git_repos:
      - url: 'https://github.com/cloin/ee-builds.git'
        dest: 'scripts/ee-builds'

    work_dir: '/tmp/ee-containers'
    required_images:
      - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8
      - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9
      - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8
      - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9
      - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8
      - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9
      - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8
      - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9

  vars_prompt:
    - name: rh_username
      prompt: "Enter your Red Hat CDN username"
      private: false
    - name: rh_password
      prompt: "Enter your Red Hat CDN password"
      private: true
    - name: automation_hub_token
      prompt: "Enter your Automation Hub token from https://console.redhat.com/ansible/automation-hub/token (or press enter to skip)"
      private: true
    - name: galaxy_token
      prompt: "Enter your Galaxy token from https://galaxy.ansible.com/ui/token (or press enter to skip)"
      private: true
      default: ""

  pre_tasks:
    - name: Include setup tasks
      ansible.builtin.include_tasks: tasks/setup.yml
      register: setup_result

  tasks:
    # Monitor podman activity via tmux
    - name: Setup podman monitoring in tmux
      block:
        - name: Ensure tmux is installed
          ansible.builtin.package:
            name: tmux
            state: present
          become: true

        - name: Check if tmux is already running
          ansible.builtin.shell: tmux ls 2>/dev/null || echo "no sessions"
          register: tmux_status
          changed_when: false

        - name: Kill existing podman-monitor session if it exists
          ansible.builtin.shell: tmux kill-session -t podman-monitor
          when: "'podman-monitor' in tmux_status.stdout"
          ignore_errors: true
          changed_when: true

        - name: Create new tmux session for podman monitoring
          ansible.builtin.shell: |
            # Create a temporary file with our ASCII art
            cat > /tmp/tmux_header.txt << 'EOF'
              ┌──────────────────────┐ 
              │       *%@@@@%=       │ 
              │    @@@@@@@@@@@@@*    │ 
              │  *@@@@@@@. @@@@@@@:  │ 
              │ @@@@@@@@-  :@@@@@@@= │ 
              │-@@@@@@@% +# #@@@@@@@ │ 
              │*@@@@@@@  @@. @@@@@@@-│       Ansible and Podman: Watch your containers build here
              │*@@@@@@  +  =  @@@@@@:│ 
              │ @@@@@. %@@@    @@@@@ │ 
              │ -@@@@ *@@@@@@= @@@@  │ 
              │   @@@@@@@@@@@@@@@%   │ 
              │     @@@@@@@@@@@*     │ 
              │         .--          │ 
              └──────────────────────┘ 
            EOF

            # Create a new tmux session
            tmux new-session -d -s podman-monitor

            # First clear the screen
            tmux send-keys -t podman-monitor "clear" C-m
            
            # Set environment variables to suppress warnings
            tmux send-keys -t podman-monitor "export ANSIBLE_DEPRECATION_WARNINGS=False" C-m
            tmux send-keys -t podman-monitor "export ANSIBLE_LOCALHOST_WARNING=False" C-m
            tmux send-keys -t podman-monitor "export ANSIBLE_SYSTEM_WARNINGS=False" C-m
            tmux send-keys -t podman-monitor "export ANSIBLE_COMMAND_WARNINGS=False" C-m
            tmux send-keys -t podman-monitor "export ANSIBLE_CONFIG=/etc/ansible/ansible.cfg" C-m
            tmux send-keys -t podman-monitor "export TERM=xterm" C-m
            
            # Display the header with red @ symbols
            tmux send-keys -t podman-monitor "cat /tmp/tmux_header.txt" C-m
            
            # Add a small delay to ensure header is displayed
            tmux send-keys -t podman-monitor "sleep 1" C-m
            
            # Now set up the monitoring command with error redirection
            tmux send-keys -t podman-monitor "watch --color -n 2 'clear && cat /tmp/tmux_header.txt && echo -e \"\\n\\033[1;36mPODMAN IMAGES\\033[0m - Updated every 2 seconds\\n-------------------------------------------\" && podman images 2>/dev/null | grep -v REPOSITORY | grep -v \"registry.redhat.io/ansible-automation-platform-25\" | sort'" C-m
            
            echo "Podman monitor started in tmux session"
          register: tmux_created
          changed_when: tmux_created.rc == 0

        - name: Open new terminal window with tmux session (WSL)
          ansible.builtin.shell: |
            # Run in background to prevent blocking
            nohup cmd.exe /c start wsl.exe -e bash -c "tmux attach -t podman-monitor" > /dev/null 2>&1 &
            # Return immediately
            exit 0
          args:
            executable: /bin/bash
          async: 10  # Run asynchronously with 10 second timeout
          poll: 0    # Don't wait for completion
          when: ansible_env.WSL_DISTRO_NAME is defined or ansible_env.WSLENV is defined
          ignore_errors: true
          changed_when: true

        - name: Open new terminal window with tmux session (Linux Desktop)
          ansible.builtin.shell: |
            if command -v gnome-terminal &>/dev/null; then
              gnome-terminal -- bash -c "tmux attach -t podman-monitor; exec bash"
            elif command -v konsole &>/dev/null; then
              konsole -e bash -c "tmux attach -t podman-monitor; exec bash"
            elif command -v xterm &>/dev/null; then
              xterm -e bash -c "tmux attach -t podman-monitor; exec bash"
            else
              echo "No supported terminal emulator found"
              exit 1
            fi
          args:
            executable: /bin/bash
          when: ansible_env.WSL_DISTRO_NAME is not defined and ansible_env.WSLENV is not defined and ansible_env.DISPLAY is defined
          ignore_errors: true
          changed_when: true

        - name: Open new terminal window with tmux session (RHEL)
          ansible.builtin.shell: |
            if command -v gnome-terminal &>/dev/null; then
              nohup gnome-terminal -- bash -c "tmux attach -t podman-monitor" > /dev/null 2>&1 &
            elif command -v konsole &>/dev/null; then
              nohup konsole -e "tmux attach -t podman-monitor" > /dev/null 2>&1 &
            elif command -v xfce4-terminal &>/dev/null; then
              nohup xfce4-terminal -e "tmux attach -t podman-monitor" > /dev/null 2>&1 &
            elif command -v xterm &>/dev/null; then
              nohup xterm -e "tmux attach -t podman-monitor" > /dev/null 2>&1 &
            else
              # If no graphical terminal is available, just continue
              echo "No graphical terminal found. Use 'tmux attach -t podman-monitor' manually."
            fi
            # Return immediately
            exit 0
          args:
            executable: /bin/bash
          async: 10  # Run asynchronously with 10 second timeout
          poll: 0    # Don't wait for completion
          register: terminal_open
          changed_when: true  # Always mark as changed
          ignore_errors: true  # Ensure playbook continues even if this fails
          when: ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora'

        - name: Show instructions to view podman images (if automatic open failed)
          ansible.builtin.debug:
            msg: |
              -------------------------------------------------------------
              PODMAN MONITOR STARTED
              -------------------------------------------------------------
              If a new terminal window did not open automatically, manually run:
              
              tmux attach -t podman-monitor
              
              To detach from the session (leaving it running): press Ctrl+b, then d
              -------------------------------------------------------------
      rescue:
        - name: Monitoring setup failed
          ansible.builtin.debug:
            msg: "Failed to set up podman monitoring. Continuing with build..."

    - name: Open new terminal window with tmux session
      block:
        - name: Check if running in graphical environment
          ansible.builtin.shell: |
            if [ -n "$DISPLAY" ] && command -v xdpyinfo >/dev/null 2>&1; then
              echo "has_display=true"
            else
              echo "has_display=false"
            fi
          register: display_check
          changed_when: false

        # Try to open a terminal only if we have a display
        - name: Open terminal with appropriate method
          ansible.builtin.shell: |
            if command -v gnome-terminal >/dev/null 2>&1; then
              # Try with --disable-factory option to avoid D-Bus issues
              gnome-terminal --disable-factory -- bash -c "tmux attach -t podman-monitor" || true
            elif command -v konsole >/dev/null 2>&1; then
              konsole -e "tmux attach -t podman-monitor" || true
            elif command -v xterm >/dev/null 2>&1; then
              xterm -e "tmux attach -t podman-monitor" || true
            elif [ -n "$WSL_DISTRO_NAME" ] || [ -n "$WSLENV" ]; then
              # For WSL, try to use cmd.exe approach
              (cmd.exe /c start wsl.exe -e bash -c "tmux attach -t podman-monitor" >/dev/null 2>&1) || true
            else
              echo "No graphical terminal available. Use 'tmux attach -t podman-monitor' manually."
            fi
          when: "'has_display=true' in display_check.stdout"
          ignore_errors: true
      rescue:
        - name: Show manual tmux instructions
          ansible.builtin.debug:
            msg: "To view podman monitor, run: tmux attach -t podman-monitor"

    # Registry authentication
    - name: Check if already logged in to container registries
      ansible.builtin.command:
        cmd: "podman login --get-login {{ item }}"
      loop: "{{ container_registries }}"
      register: login_check_result
      failed_when: false
      changed_when: false
      no_log: true  # Avoid leaking credentials in output

    - name: Verify registry authentication
      ansible.builtin.debug:
        msg: "Registry {{ item.0 }} authentication status: {{ 'Successful' if item.1.rc == 0 else 'Failed' }}"
      loop: "{{ container_registries | zip(login_check_result.results) | list }}"
      loop_control:
        label: "{{ item.0 }}"

    # Log in to registries that need authentication
    - name: Ensure registry login is working
      ansible.builtin.include_tasks: tasks/login_registry.yml

    # Image management - Check what we have and get what we need
    - name: Check if required container images exist
      ansible.builtin.command:
        cmd: "podman image exists {{ item }}"
      loop: "{{ required_images }}"
      register: image_check_results
      changed_when: false
      failed_when: false
      loop_control:
        label: "{{ item }}"

    - name: Pull missing container images
      ansible.builtin.command:
        cmd: "podman pull {{ item.item }}"
      loop: "{{ image_check_results.results }}"
      when: item.rc is defined and item.rc != 0
      register: pull_results
      changed_when: pull_results.rc == 0
      retries: 3
      delay: 5
      until: pull_results is succeeded or pull_results is failed
      ignore_errors: true
      loop_control:
        loop_var: item
        label: "{{ item.item }}"

    - name: Verify container images were pulled
      ansible.builtin.command:
        cmd: "podman image exists {{ item }}"
      loop: "{{ required_images }}"
      register: image_verify_results
      changed_when: false
      failed_when: false
      ignore_errors: true
      loop_control:
        label: "{{ item }}"

    - name: Warning about missing container images
      ansible.builtin.debug:
        msg: |
          WARNING: Some required container images are missing. This will cause builds to fail.
          Missing images: {{ image_verify_results.results | selectattr('rc', 'ne', 0) | map(attribute='item') | list | join(', ') }}

          Please check your Red Hat Registry credentials and ensure you have access to these images.
          You may need to:
          1. Register with subscription-manager
          2. Attach a valid subscription
          3. Verify your registry service account at https://access.redhat.com/terms-based-registry/
      when: image_verify_results.results | selectattr('rc', 'ne', 0) | list | length > 0

    # Cleanup unused/old resources
    - name: Clean up unused images and build artifacts
      block:
        - name: Include cleanup tasks
          ansible.builtin.include_tasks: tasks/cleanup.yml
      rescue:
        - name: Handle cleanup failure
          ansible.builtin.debug:
            msg: "Image cleanup failed: {{ ansible_failed_result.stderr | default('Unknown error') }}"

    # Dependency management
    - name: Check if requirements.txt exists
      ansible.builtin.stat:
        path: "{{ work_dir }}/files/requirements.txt"
      register: requirements_txt

    - name: Install Python packages from requirements.txt
      ansible.builtin.pip:
        requirements: "{{ work_dir }}/files/requirements.txt"
        extra_args: "--upgrade"
      when: requirements_txt.stat.exists
      register: pip_install_result
      retries: 3
      delay: 5
      until: pip_install_result is succeeded
      failed_when: false

    - name: Check if requirements.yml exists
      ansible.builtin.stat:
        path: "{{ work_dir }}/files/requirements.yml"
      register: requirements_yml

    - name: Check if ansible-galaxy collections need to be installed
      ansible.builtin.command:
        cmd: ansible-galaxy collection list -r {{ work_dir }}/files/requirements.yml
      when: requirements_yml.stat.exists
      register: galaxy_list_result
      failed_when: false
      changed_when: false

    - name: Install ansible-galaxy collections
      ansible.builtin.command:
        cmd: ansible-galaxy collection install -r {{ work_dir }}/files/requirements.yml
      when: >
        requirements_yml.stat.exists and
        (galaxy_list_result.stdout.find('No collections found') != -1 or galaxy_install_force | default(false))
      register: galaxy_install_result
      changed_when: galaxy_install_result.rc == 0
      failed_when: galaxy_install_result.rc != 0
      ignore_errors: true

    - name: Check if ansible-builder is already installed
      ansible.builtin.shell: which ansible-builder || echo "not found"
      register: ansible_builder_check
      changed_when: false

    - name: Install ansible-builder via pip if not found
      ansible.builtin.pip:
        name: ansible-builder
        state: present
        extra_args: "--user"
      when: "'not found' in ansible_builder_check.stdout"

    # Configuration setup
    - name: Ensure build configs directory exists
      ansible.builtin.file:
        path: "{{ work_dir }}/_build/configs"
        state: directory
        mode: '0755'

    - name: Create ansible.cfg in build context
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ansible.cfg"
        dest: "{{ work_dir }}/_build/configs/ansible.cfg"
        mode: '0644'

    - name: Copy ansible.cfg to system location
      ansible.builtin.copy:
        src: "{{ work_dir }}/_build/configs/ansible.cfg"
        dest: /etc/ansible/ansible.cfg
        mode: '0644'
        remote_src: true
      become: true

    - name: Update ansible.cfg with Automation Hub token
      ansible.builtin.template:
        src: templates/ansible.cfg.j2
        dest: "{{ work_dir }}/_build/configs/ansible.cfg"
        mode: '0644'
      vars:
        automation_hub_token: "{{ automation_hub_token | default('') }}"

    # DNS and connectivity checks
    - name: Verify DNS resolution
      ansible.builtin.command:
        cmd: "nslookup {{ item }}"
      loop:
        - github.com
        - cdn-ubi.redhat.com
        - galaxy.ansible.com
      register: dns_checks
      changed_when: false
      failed_when: false
      loop_control:
        label: "{{ item }}"

    - name: Set DNS servers for Podman
      ansible.builtin.template:
        src: templates/registries.conf.j2
        dest: /etc/containers/registries.conf
        mode: '0644'
        backup: true

    # Environment selection and building
    - name: Include environment menu tasks
      ansible.builtin.include_tasks: tasks/environment_menu.yml
      register: environment_menu_result

    - name: Debug selected environments
      ansible.builtin.debug:
        msg: "Selected environments to process: {{ selected_environments | join(', ') }}"
      when: selected_environments | default([]) | length > 0

    - name: Process each selected environment
      ansible.builtin.include_tasks: tasks/build_environment.yml
      loop: "{{ selected_environments | default([]) }}"
      loop_control:
        loop_var: current_env
        label: "{{ current_env }}"
      when: selected_environments | default([]) | length > 0

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ✅ Finished processing all selected environments.
          To use these environments, run: podman images | grep -E '(rhel8|rhel9)'
          To clean up unused images, run: podman image prune -f

  handlers:
    - name: Build container image
      ansible.builtin.debug:
        msg: "Container image {{ current_env }} has been built successfully"

    - name: Handle infra ansible fix
      ansible.builtin.debug:
        msg: "Fixed infra.ansible reference in requirements.yml for {{ current_env }}"
