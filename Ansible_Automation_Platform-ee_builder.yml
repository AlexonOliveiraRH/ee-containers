---
# Ansible Automation Platform - Execution Environment Builder
# This playbook builds customized execution environments based on Red Hat AAP base images

# Play 1: Verify prerequisites
- name: Verify root privileges
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Check if running as root or with sudo
      ansible.builtin.command: id -u
      register: user_id
      changed_when: false

    - name: Fail if not running with proper privileges
      ansible.builtin.fail:
        msg: |
          This playbook must be run as root or with sudo privileges.
          Please run again using: sudo ansible-playbook Ansible_Automation_Platform-ee_builder.yml -K
      when: user_id.stdout != "0"

# Play 2: Display title and introduction
- name: Display title screen
  hosts: localhost
  connection: local
  gather_facts: false
  environment:
    ANSIBLE_LOCALHOST_WARNING: "False" 
    ANSIBLE_DEPRECATION_WARNINGS: "False"
    ANSIBLE_COMMAND_WARNINGS: "False"
    ANSIBLE_SYSTEM_WARNINGS: "False"
  tasks:
    - name: Clear screen before showing title
      ansible.builtin.shell: clear
      changed_when: false
      
    - name: Show title
      ansible.builtin.debug:
        msg: |
          ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
          │                                                                                      ..:-=*##*=-:..          │
          │                                                                                    .*%@@@@@@@@@@@@%*.        │
          │                                                                                 .:#@@@@@@@@@@@@@@@@@@#:.     │
          │                                                                                .*@@@@@@@@@@*-@@@@@@@@@@*.    │
          │                                                                               .#@@@@@@@@@@*. =@@@@@@@@@@#.   │
          │                                                                              .%@@@@@@@@@@@ .# +@@@@@@@@@@%.  │
          │                                                                              -%@@@@@@@@@@..#%-.*@@@@@@@@@%-  │
          │     "A Streamlined Approach to Building Ansible Execution Environments"     .+@@@@@@@@@@= =@@@.:#@@@@@@@@@+. │
          │                                                                             .+@@@@@@@@@# ..:+@%.-@@@@@@@@@+. │
          │                                                                             .=@@@@@@@@@ .@@+. *+.-@@@@@@@%=  │
          │                                                                              .%@@@@@@@:.*@@@@%.  .+@@@@@@%.  │
          │                                                                               .@@@@@@= =@@@@@@@%=.:%@@@@@.   │
          │                                                                                :%@@@@@@@@@@@@@@@@@@@@@@%:    │
          │                                                                                 .*@@@@@@@@@@@@@@@@@@@@*.     │
          │                                                                                   .+@@@@@@@@@@@@@@@@+..      │
          │                                                                                     ..+*%@@@@@@%*+..         │
          └──────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

    - name: Pause for title screen
      ansible.builtin.pause:
        seconds: 3
        prompt: "Starting Execution Environment Builder..."

# Play 3: Main execution environment building process
- name: Build Execution Environments for Ansible Automation Platform
  hosts: localhost
  become: true
  gather_facts: true

  # Variables definition section
  vars:
    # Connection variables
    container_registries:
      - registry.redhat.io
      - console.redhat.com
      - registry.access.redhat.com
      - quay.io
      - registry.connect.redhat.com
    dns_servers:
      - '8.8.8.8'
      - '8.8.4.4'
    
    # Package and dependency variables
    required_packages:
      - python3-pip
      - ansible-builder
      - ansible-core
      - git
      - podman
      - podman-docker
      - tmux
      - xdg-utils
      - yum-utils
    
    # Always update the protected_images list in defaults/main.yml
    update_protected_list: true
    
    # Repository variables  
    git_repos:
      - url: 'https://github.com/cloin/ee-builds.git'
        dest: 'examples/ee-builds'
    work_dir: '/tmp/ee-containers'
    
    # Container image variables
    required_images:
      - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8
      - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9
      - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8
      - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9
      - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8
      - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9
      - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8
      - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9

  # Interactive variables
  vars_prompt:
    - name: rh_username
      prompt: "Enter your Red Hat CDN username"
      private: false
    - name: rh_password
      prompt: "Enter your Red Hat CDN password"
      private: true
    - name: automation_hub_token
      prompt: "Enter your Automation Hub token (or press enter to skip)"
      private: true
    - name: galaxy_token
      prompt: "Enter your Galaxy token (or press enter to skip)"
      private: true
      default: ""

  # Setup tasks
  pre_tasks:
    - name: Install tmux build dependencies
      ansible.builtin.command:
        cmd: yum-builddep -y tmux
      become: true
      register: tmux_deps_result
      changed_when: tmux_deps_result.rc == 0
      failed_when: false
      
    - name: Install tmux package
      ansible.builtin.package:
        name: tmux
        state: present
      become: true
      
    - name: Include setup tasks
      ansible.builtin.include_tasks: tasks/setup.yml
      register: setup_result

  # Main tasks 
  tasks:
    #
    # SECTION 1: Environment Verification
    #
    - name: Gather package facts 
      ansible.builtin.package_facts:
        manager: auto
      throttle: 1

    - name: Install missing packages 
      ansible.builtin.package:
        name: "{{ required_packages | difference(ansible_facts.packages.keys() | list) }}"
        state: present
      when: (required_packages | difference(ansible_facts.packages.keys() | list)) | length > 0

    - name: Verify DNS resolution
      ansible.builtin.command:
        cmd: "nslookup {{ item }}"
      loop:
        - github.com
        - cdn-ubi.redhat.com
        - galaxy.ansible.com
      register: dns_checks
      changed_when: false
      failed_when: false
      loop_control:
        label: "{{ item }}"

    - name: Set DNS servers for Podman
      ansible.builtin.template:
        src: templates/registries.conf.j2
        dest: /etc/containers/registries.conf
        mode: '0644'
        backup: true

    #
    # SECTION 2: Registry Authentication
    #
    - name: Check if already logged in to container registries
      ansible.builtin.command:
        cmd: "podman login --get-login {{ item }}"
      loop: "{{ container_registries }}"
      register: login_check_result
      failed_when: false
      changed_when: false
      no_log: true

    - name: Ensure registry login is working
      ansible.builtin.include_tasks: tasks/login_registry.yml

    #
    # SECTION 3: Image Management
    #
    - name: Check and pull required container images
      block:
        - name: Check if required container images exist
          ansible.builtin.command:
            cmd: "podman image exists {{ item }}"
          loop: "{{ required_images }}"
          register: image_check_results
          changed_when: false
          failed_when: false
          loop_control:
            label: "{{ item }}"

        - name: Pull missing container images
          ansible.builtin.command:
            cmd: "podman pull {{ item.item }}"
          loop: "{{ image_check_results.results | selectattr('rc', 'defined') | selectattr('rc', 'ne', 0) | list }}"
          register: pull_results
          changed_when: pull_results.rc == 0
          retries: 2
          delay: 3
          until: pull_results is succeeded or pull_results is failed
          ignore_errors: true
          loop_control:
            loop_var: item
            label: "{{ item.item }}"
            pause: 0.5
      rescue:
        - name: Warning about failed image pulls
          ansible.builtin.debug:
            msg: "Failed to pull some container images. Continuing with available images."

    #
    # SECTION 4: Builder & Configuration Setup
    #
    - name: Configure builder
      block:
        - name: Check if ansible-builder is already installed
          ansible.builtin.shell: which ansible-builder || echo "not found"
          register: ansible_builder_check
          changed_when: false

        - name: Install ansible-builder via pip if not found
          ansible.builtin.pip:
            name: ansible-builder
            state: present
            extra_args: "--user"
          when: "'not found' in ansible_builder_check.stdout"
          
        - name: Ensure build configs directory exists
          ansible.builtin.file:
            path: "{{ work_dir }}/_build/configs"
            state: directory
            mode: '0755'

        - name: Create ansible.cfg in build context
          ansible.builtin.template:
            src: templates/ansible.cfg.j2
            dest: "{{ work_dir }}/_build/configs/ansible.cfg"
            mode: '0644'
          vars:
            automation_hub_token: "{{ automation_hub_token | default('') }}"
            current_user: "{{ ansible_user_id | default('root') }}"

        - name: Copy ansible.cfg to system location
          ansible.builtin.copy:
            src: "{{ work_dir }}/_build/configs/ansible.cfg"
            dest: /etc/ansible/ansible.cfg
            mode: '0644'
            remote_src: true

        - name: Create ansible.cfg in current directory
          ansible.builtin.template:
            src: templates/ansible.cfg.j2
            dest: "{{ playbook_dir }}/ansible.cfg"
            mode: '0644'
          vars:
            current_user: "{{ ansible_user_id | default(lookup('env', 'USER')) }}"

    #
    # SECTION 5: Dependencies Management
    #
    - name: Manage dependencies
      block:
        - name: Check if requirements.txt exists
          ansible.builtin.stat:
            path: "{{ work_dir }}/files/requirements.txt"
          register: requirements_txt

        - name: Install Python packages from requirements.txt
          ansible.builtin.pip:
            requirements: "{{ work_dir }}/files/requirements.txt"
            extra_args: "--upgrade"
          when: requirements_txt.stat.exists
          register: pip_install_result
          retries: 2
          delay: 3
          until: pip_install_result is succeeded
          failed_when: false

        - name: Check if requirements.yml exists
          ansible.builtin.stat:
            path: "{{ work_dir }}/files/requirements.yml"
          register: requirements_yml

        - name: Install ansible-galaxy collections
          ansible.builtin.command:
            cmd: ansible-galaxy collection install -r {{ work_dir }}/files/requirements.yml
          when: requirements_yml.stat.exists
          register: galaxy_install_result
          changed_when: galaxy_install_result.rc == 0
          failed_when: galaxy_install_result.rc != 0
          ignore_errors: true

    #
    # SECTION 6: Clean Up Old Resources
    #
    - name: Clean up unused images and build artifacts
      block:
        - name: Include cleanup tasks
          ansible.builtin.include_tasks: tasks/cleanup.yml
      rescue:
        - name: Handle cleanup failure
          ansible.builtin.debug:
            msg: "Image cleanup failed: {{ ansible_failed_result.stderr | default('Unknown error') }}"

    #
    # SECTION 7: Environment Selection
    #
    - name: Include environment menu tasks
      ansible.builtin.include_tasks: tasks/environment_menu.yml
      register: environment_menu_result

    - name: Debug selected environments
      ansible.builtin.debug:
        msg: "Selected environments to process: {{ selected_environments | join(', ') }}"
      when: selected_environments | default([]) | length > 0

    - name: Set environment display name
      ansible.builtin.set_fact:
        environment_display_name: >-
          {{ "All Environments" if "all" in selected_environments or
             selected_environments|length >= (required_images|length - 2) else
             selected_environments|join(', ') }}

    #
    # SECTION 8: Monitoring Setup
    #
    - name: Setup podman monitoring in tmux
      block:
        - name: Ensure scripts directory exists
          ansible.builtin.file:
            path: "{{ playbook_dir }}/scripts"
            state: directory
            mode: '0755'

        - name: Create open_tmux_session.sh script
          ansible.builtin.copy:
            dest: "{{ playbook_dir }}/scripts/open_tmux_session.sh"
            mode: '0755'
            content: |
              #!/bin/bash
              # open_tmux_session.sh - Opens a terminal window with tmux session attached
              
              # Function to try opening a terminal with tmux
              open_terminal_with_tmux() {
                # If we're already in tmux, create a new window
                if [ -n "$TMUX" ]; then
                  tmux new-window "tmux attach -t podman-monitor"
                  return 0
                fi
              
                # Try different terminal emulators in order of preference
                for terminal in gnome-terminal konsole xfce4-terminal terminator mate-terminal xterm; do
                  if command -v $terminal >/dev/null 2>&1; then
                    case $terminal in
                      gnome-terminal)
                        nohup $terminal -- tmux attach -t podman-monitor >/dev/null 2>&1 &
                        ;;
                      *)
                        nohup $terminal -e "tmux attach -t podman-monitor" >/dev/null 2>&1 &
                        ;;
                    esac
                    echo "Opened tmux session in $terminal"
                    return 0
                  fi
                done
                
                # If none of the above worked, try X-terminal-emulator alternative
                if command -v x-terminal-emulator >/dev/null 2>&1; then
                  nohup x-terminal-emulator -e "tmux attach -t podman-monitor" >/dev/null 2>&1 &
                  echo "Opened tmux session in x-terminal-emulator"
                  return 0
                fi
                
                return 1
              }
              
              # Main script execution
              main() {
                # Verify tmux session exists
                if ! tmux has-session -t podman-monitor 2>/dev/null; then
                  echo "Error: podman-monitor tmux session doesn't exist."
                  exit 1
                fi
              
                # Try to open terminal with tmux
                if ! open_terminal_with_tmux; then
                  echo "Could not open a terminal window automatically."
                  echo "To view podman monitor, run: tmux attach -t podman-monitor"
                  exit 1
                fi
                
                exit 0
              }
              
              # Run main function
              main

        - name: Kill existing podman-monitor session if it exists
          ansible.builtin.shell: tmux kill-session -t podman-monitor 2>/dev/null || true
          ignore_errors: true

        - name: Create tmux header file
          ansible.builtin.shell: |
            cat > /tmp/tmux_header.txt << 'EOFHEADER'
                                      @@@@                                                             
                                    @@@@@@@                                                            
                                   @@@@@@@@@@                                                          
                                  @@@@@@@@@@@                                                          
                                 @@@@@@  @@@@@@                                                        
                      ╔═════════@@@@@@════@@@@@═════════════════════════════════════════════════════╗  
                      ║        @@@@@@      @@@@@@                                                   ║  
                      ║       @@@@@@        @@@@@@                                                  ║  
                      ║      @@@@@@          @@@@@@                                                 ║  
                      ║     @@@@@@            @@@@@                                                 ║  
                      ║    @@@@@@@@            @@@@@@                                               ║  
                      ║   @@@@@@@@@@@@@         @@@@@@                                              ║  
                      ║  @@@@@@  @@@@@@@@@       @@@@@@                                             ║  
                      ║ @@@@@@      @@@@@@@@@     @@@@@@ NSIBLE & PODMAN                            ║  
                      ╠@@@@@@══════════@@@@@@@@@═══@@@@@@═══════════════════════════════════════════╣  
                      @@@@@@              @@@@@@@@@@@@@@@@ EXECUTION BUILD MONITOR                  ║  
                     @@@@@@@══════════════════@@@@@@@@@@@@@═════════════════════════════════════════╝  
                    @@@@@@@                      @@@@@@@@@@@                                           
                   @@@@@@@                          @@@@@@@@                                           
                  @@@@@@                                @@@@
            EOFHEADER
            chmod 0644 /tmp/tmux_header.txt
          changed_when: false

        - name: Create new tmux session for monitoring
          ansible.builtin.shell: |
            # Create the base session
            tmux new-session -d -s podman-monitor
            
            # Set environment variables
            tmux send-keys -t podman-monitor "export ANSIBLE_DEPRECATION_WARNINGS=False" C-m
            tmux send-keys -t podman-monitor "export ANSIBLE_LOCALHOST_WARNING=False" C-m
            tmux send-keys -t podman-monitor "export ANSIBLE_SYSTEM_WARNINGS=False" C-m
            tmux send-keys -t podman-monitor "export ANSIBLE_COMMAND_WARNINGS=False" C-m
            tmux send-keys -t podman-monitor "export TERM=xterm-256color" C-m
            
            # Clear and show header
            tmux send-keys -t podman-monitor "clear" C-m
            tmux send-keys -t podman-monitor "echo -e \"\$(cat /tmp/tmux_header.txt)\"" C-m
            
            # Add monitoring command with environment name in title
            display_name="{{ environment_display_name }}"
            tmux send-keys -t podman-monitor "watch --color -n 2 'clear && echo -e \"\$(cat /tmp/tmux_header.txt)\" && echo -e \"\\n\\033[1;32m>>> MONITORING: \\033[1;33m$display_name \\033[1;32m<<<\\033[0m\\n\\033[38;5;39m═══════════════════════════════════════════════════════════════════════════════\\033[0m\" && podman images 2>/dev/null | grep -v REPOSITORY | grep -v \"registry.redhat.io/ansible-automation-platform-25\" | sort'" C-m
            
            # Name the window according to selected environment(s)
            tmux rename-window -t podman-monitor:0 "{{ 'all' if 'all' in selected_environments else selected_environments[0] | default('monitor') }}"
            
            # Create simple access script for convenience
            echo '#!/bin/bash' > /tmp/podman-monitor.sh
            echo 'echo -e "\033[1;32mConnecting to podman monitoring session...\033[0m"' >> /tmp/podman-monitor.sh
            echo 'tmux attach -t podman-monitor' >> /tmp/podman-monitor.sh
            chmod +x /tmp/podman-monitor.sh
            
            echo "Podman monitoring session created"
          register: tmux_session_created
          changed_when: tmux_session_created.rc == 0

        - name: Get tmux info for debug
          ansible.builtin.shell: |
            echo "Current user: $(whoami)"
            echo "DISPLAY: $DISPLAY"
            echo "In tmux: ${TMUX:-no}"
            echo "Current TTY: $(tty)"
            tmux ls || echo "No tmux sessions"
          changed_when: false
          register: tmux_debug
          
        - name: Debug tmux info
          ansible.builtin.debug:
            msg: "{{ tmux_debug.stdout_lines }}"

        - name: Try direct terminal opening
          ansible.builtin.shell: |
            if [ -n "$TMUX" ]; then
              # Already in tmux - just spawn a window
              tmux new-window -d "tmux attach -t podman-monitor" || true
              echo "Created new tmux window"
              exit 0
            fi
            
            # Find first available terminal with proper dimensions
            for term in gnome-terminal x-terminal-emulator konsole xfce4-terminal terminator xterm; do
              if command -v $term > /dev/null 2>&1; then
                # Try to launch with proper dimensions for each terminal type
                case $term in
                  gnome-terminal)
                    DISPLAY=:0 $term --geometry=117x35 -- tmux attach -t podman-monitor &
                    ;;
                  xterm)
                    DISPLAY=:0 $term -geometry 117x35 -e "tmux attach -t podman-monitor" &
                    ;;
                  konsole)
                    DISPLAY=:0 $term --geometry 117x35 -e "tmux attach -t podman-monitor" &
                    ;;
                  terminator)
                    DISPLAY=:0 $term --geometry=117x35 -e "tmux attach -t podman-monitor" &
                    ;;
                  *)
                    # Default for other terminals
                    DISPLAY=:0 $term -e "tmux attach -t podman-monitor" &
                    ;;
                esac
                echo "Launched $term with larger dimensions (117x35)"
                exit 0
              fi
            done
            
            if grep -q Microsoft /proc/version 2>/dev/null; then
              # WSL environment, use Windows terminal with size parameters
              cmd.exe /c start wt.exe --width 117 --height 35 -d . wsl.exe -e bash -c "tmux attach -t podman-monitor" &
              echo "Launched WSL terminal with larger dimensions"
              exit 0
            fi
            
            echo "Could not find a suitable terminal. Use 'tmux attach -t podman-monitor' to connect manually"
            exit 0
          args:
            executable: /bin/bash
          register: term_launch
          changed_when: false
          
        - name: Show terminal opening results
          ansible.builtin.debug:
            msg: "{{ term_launch.stdout_lines }}"

        - name: Show instructions for accessing monitor
          ansible.builtin.debug:
            msg: |
              🔍 Podman monitoring session created for {{ environment_display_name }}
              
              To view the monitoring session:
              1. Run in any terminal: tmux attach -t podman-monitor
              2. Or run: /tmp/podman-monitor.sh
      when: selected_environments | default([]) | length > 0
      tags: [tmux_monitor]

    #
    # SECTION 9: Environment Building
    #
    - name: Process each selected environment
      ansible.builtin.include_tasks: tasks/build_environment.yml
      loop: "{{ selected_environments | default([]) }}"
      loop_control:
        loop_var: current_env
        label: "{{ current_env }}"
      when: selected_environments | default([]) | length > 0

    #
    # SECTION 10: Completion
    #
    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ✅ Finished processing all selected environments.
          ✅ To use these environments, run: podman images | grep -E '(rhel8|rhel9)'
          ✅ To clean up unused images, run: podman image prune -f
      when: selected_environments | default([]) | length > 0

  #
  # HANDLERS
  #
  handlers:
    - name: Build container image
      ansible.builtin.debug:
        msg: "Container image {{ current_env }} has been built successfully"

    - name: Handle infra ansible fix
      ansible.builtin.debug:
        msg: "Fixed infra.ansible reference in requirements.yml for {{ current_env }}"
