- name: Automaticly build Execution Environments for Ansible Automation Platform
  hosts: localhost
  become: true

  vars:
    container_registries:
      - registry.redhat.io
      - console.redhat.com
      - registry.access.redhat.com
      - quay.io
      - registry.connect.redhat.com
    dns_servers:
      - '8.8.8.8'
      - '8.8.4.4'
    required_packages:
      - python3-pip
      - ansible-core
      - git
      - podman
      - ansible-dev-tools
      - podman-docker
      - podman-compose
      - podman-plugins
      - podman-remote
      - yum-utils
    git_repo:
      url: 'https://github.com/cloin/ee-builds.git'
      branch: 'main'
    work_dir: '/tmp/ee-containers'

  vars_prompt:
    - name: rh_username
      prompt: "Enter your Red Hat CDN username"
      private: false
    - name: rh_password
      prompt: "Enter your Red Hat CDN password"
      private: true
    - name: automation_hub_token
      prompt: "Enter your Automation Hub token from https://console.redhat.com/ansible/automation-hub/token (or press enter to skip)"
      private: true
    - name: galaxy_token
      prompt: "Enter your Galaxy token from https://galaxy.ansible.com/ui/token (or press enter to skip)"
      private: true
      default: ""

  pre_tasks:
    - name: Verify internet connectivity
      ansible.builtin.uri:
        url: https://google.com
        method: GET
      register: connectivity_check
      failed_when: connectivity_check.status != 200
      changed_when: false

    - name: Fail if no internet connection is detected
      ansible.builtin.fail:
        msg: "No internet connection detected."
      when: connectivity_check.status != 200

    - name: Install prerequisites
      tags: [setup, packages]
      vars:
        packages:
          - python3-pip
          - ansible-core
          - git
          - podman
          - ansible-dev-tools
          - podman-docker
          - podman-compose
          - podman-plugins
          - podman-remote
          - yum-utils
      block:
        - name: Install required packages
          ansible.builtin.package:
            name: "{{ packages }}"
            state: present

    - name: Do dnf upgrade all packages
      ansible.builtin.dnf:
        name: '*'
        state: latest

    - name: Ensure container policy directory exists
      ansible.builtin.file:
        path: /etc/containers/policy.d
        state: directory
        mode: '0755'

    - name: Create container policy file
      ansible.builtin.copy:
        dest: /etc/containers/policy.d/default.json
        mode: '0644'
        content: |
          {
            "default": [{"type": "reject"}],
            "transports": {
              "docker": {
                "registry.redhat.io": [{"type": "insecureAcceptAnything"}],
                "registry.access.redhat.com": [{"type": "insecureAcceptAnything"}],
                "quay.io": [{"type": "insecureAcceptAnything"}],
                "docker.io": [{"type": "insecureAcceptAnything"}]
              }
            }
          }

    - name: Check directories
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - environments
        - /tmp/ee-containers/environments
        - environments/.git
        - /tmp/ee-containers/environments/.git
        - /etc/containers/policy.d/
      register: dir_checks

    - name: Check if local environments directory exists
      ansible.builtin.stat:
        path: environments
      register: local_environments_dir

    - name: Check if local environments directory is empty
      ansible.builtin.find:
        paths: environments
        recurse: false
      register: local_environments_dir_content
      when: local_environments_dir.stat.exists

    - name: Ensure /tmp/ee-containers/environments directory exists
      ansible.builtin.file:
        path: /tmp/ee-containers/environments
        state: directory
        mode: '0755'

    - name: Check if /tmp/ee-containers/environments directory exists
      ansible.builtin.stat:
        path: /tmp/ee-containers/environments
      register: environments_dir

    - name: Check if /tmp/ee-containers/environments directory is empty
      ansible.builtin.find:
        paths: /tmp/ee-containers/environments
        recurse: false
      register: environments_dir_content
      when: environments_dir.stat.exists

    - name: Check if /tmp/ee-containers/environments is a git repository
      ansible.builtin.stat:
        path: /tmp/ee-containers/environments/.git
      register: git_repo_exists

    - name: Remove existing directory if it's not a git repository
      ansible.builtin.file:
        path: /tmp/ee-containers/environments
        state: absent
      when: environments_dir.stat.exists and not git_repo_exists.stat.exists

    - name: Clone or update GitHub repository
      ansible.builtin.git:
        repo: 'https://github.com/cloin/ee-builds.git'
        dest: /tmp/ee-containers/environments/
        version: 'main'
        clone: true
        update: true
        force: true
      when: not environments_dir.stat.exists or not git_repo_exists.stat.exists or environments_dir_content.matched == 0

    - name: Check if repository is already cloned in current directory
      ansible.builtin.stat:
        path: environments/.git
      register: repo_cloned_local

    - name: Clone GitHub repository to current directory if not already cloned
      ansible.builtin.git:
        repo: 'https://github.com/cloin/ee-builds.git'
        dest: environments/
        version: 'main'  # Specify the branch or commit
        clone: true
        update: true
        force: true
      when: not repo_cloned_local.stat.exists and not local_environments_dir.stat.exists

    - name: Install required collections
      ansible.builtin.command:
        cmd: ansible-galaxy collection install community.general
      changed_when: false

  tasks:
    - name: Check if already logged in to registries
      ansible.builtin.command:
        cmd: "podman login -u {{ rh_username }} -p {{ rh_password }} {{ item }}"
        creates: "/root/.config/containers/auth.json"
      loop:
        - registry.redhat.io
        - console.redhat.com
        - registry.access.redhat.com
        - quay.io
        - registry.connect.redhat.com
      register: login_result
      failed_when:
        - login_result.rc != 0
        - item != 'console.redhat.com'  # Ignore failures for console.redhat.com
      ignore_errors: "{{ item == 'console.redhat.com' }}"  # Only ignore errors for console.redhat.com
#      no_log: true  # Hide sensitive information from logs

    - name: Check if required container images exist
      ansible.builtin.command:
        cmd: "podman image exists {{ item }}"
      loop:
        - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8
        - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9
        - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8
        - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9
        - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8
        - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9
        - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8
        - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9
      register: image_check_results
      changed_when: false
      failed_when: false


    - name: Pull missing container images
      ansible.builtin.command:
        cmd: "podman pull {{ item.item }}"
      loop: "{{ image_check_results.results }}"
      when: item.rc != 0
      register: pull_results
      changed_when: "'Downloaded newer image' in pull_results.stdout"
      retries: 3
      delay: 5
      until: pull_results is success
      notify: Display pulled images status

    - name: Clean up unused images and build artifacts
      block:
        - name: Create consolidated protected images list
          ansible.builtin.set_fact:
            protected_images: >-
              {{
                [
                  'registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8:latest',
                  'registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9:latest',
                  'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest',
                  'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9:latest',
                  'registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest',
                  'registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest',
                  'registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest',
                  'registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9:latest'
                ] + (menu_options | regex_replace('\n\d+: ', '\n') | regex_replace('\n', '\n') | split('\n') | select('regex', '.+') | list)
              }}

        - name: Create cleanup script
          ansible.builtin.template:
            src: templates/image_cleanup.sh.j2
            dest: /tmp/image_cleanup.sh
            mode: '0755'
            validate: bash -n %s

        - name: Execute image cleanup
          ansible.builtin.command:
            cmd: /tmp/image_cleanup.sh
          register: cleanup_result
          changed_when: cleanup_result.rc == 0

        - name: Remove cleanup script
          ansible.builtin.file:
            path: /tmp/image_cleanup.sh
            state: absent

        - name: Display cleanup summary
          ansible.builtin.debug:
            msg: "Image cleanup completed successfully"
          when: cleanup_result.rc == 0

        - name: Debug cleanup removal
          ansible.builtin.debug:
            var: cleanup_result
            verbosity: 1
          when: cleanup_result.failed is defined

      rescue:
        - name: Handle cleanup failure
          ansible.builtin.debug:
            msg: "Image cleanup failed: {{ cleanup_result.stderr | default('Unknown error') }}"

      always:
        - name: Ensure cleanup script is removed
          ansible.builtin.file:
            path: /tmp/cleanup_images.sh
            state: absent
          register: cleanup_result
          failed_when:
            - cleanup_result.failed is defined
            - cleanup_result.failed
            - '"Permission denied" not in cleanup_result.msg'

    - name: Check if requirements.txt exists
      ansible.builtin.stat:
        path: /tmp/ee-containers/files/requirements.txt
      register: requirements_txt

    - name: Install Python packages from requirements.txt if it exists
      ansible.builtin.pip:
        requirements: /tmp/ee-containers/files/requirements.txt
      when: requirements_txt.stat.exists

    - name: Check if requirements.yml exists
      ansible.builtin.stat:
        path: /tmp/ee-containers/files/requirements.yml
      register: requirements_yml

    - name: Install ansible-galaxy collections from requirements.yml if it exists
      ansible.builtin.command:
        cmd: "ansible-galaxy collection install -r /tmp/ee-containers/files/requirements.yml"
        creates: "/root/.ansible/collections/ansible_collections"
      when: requirements_yml.stat.exists
      failed_when: requirements_yml.rc != 0

    - name: Ensure /tmp/ee-containers/_build/configs directory exists
      ansible.builtin.file:
        path: /tmp/ee-containers/_build/configs
        state: directory
        mode: '0755'

    - name: Create ansible.cfg in /tmp/ee-containers/_build/configs
      ansible.builtin.copy:
        dest: /tmp/ee-containers/_build/configs/ansible.cfg
        mode: '0644'
        content: |
          [defaults]
          inventory = /etc/ansible/hosts
          remote_user = root
          host_key_checking = False
          retry_files_enabled = False
          collections_paths = ~/.ansible/collections:/usr/share/ansible/collections
          roles_path = ~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles

          [galaxy]
          server_list = validated, published, galaxy

          [galaxy_server.published]
          url=https://console.redhat.com/api/automation-hub/content/published/
          auth_url=https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
          token={{ automation_hub_token }}

          [galaxy_server.validated]
          url=https://console.redhat.com/api/automation-hub/content/validated/
          auth_url=https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
          token={{ automation_hub_token }}

          [galaxy_server.galaxy]
          url=https://galaxy.ansible.com/
          token={{ galaxy_token if galaxy_token != "" else omit }}

    - name: Verify DNS resolution
      ansible.builtin.command:
        cmd: "nslookup {{ item }}"
      loop:
        - github.com
        - cdn-ubi.redhat.com
        - galaxy.ansible.com
      register: dns_checks
      changed_when: false
      failed_when: dns_checks.rc != 0

    - name: Set DNS servers for Podman
      ansible.builtin.copy:
        dest: /etc/containers/registries.conf
        content: |
          [registries.search]
          registries = ['docker.io', 'quay.io', 'registry.fedoraproject.org', 'registry.access.redhat.com', 'registry.redhat.io']

          [registries.insecure]
          registries = []

          [registries.block]
          registries = []

          [registries]
          registries = ['docker.io', 'quay.io', 'registry.fedoraproject.org', 'registry.access.redhat.com', 'registry.redhat.io']

          [engine]
          dns_servers = ['8.8.8.8', '8.8.4.4']
        mode: '0644'

    - name: Build a numeric menu for the user to select environment
      block:
        - name: Find EE environment directories
          ansible.builtin.find:
            paths: "environments/"
            patterns: "ee-*"
            recurse: false
            file_type: directory
          register: found_ee_dirs

        - name: Display EE environment directories
          ansible.builtin.debug:
            var: found_ee_dirs

        - name: Find DE environment directories
          ansible.builtin.find:
            paths: "environments/"
            patterns: "de-*"
            recurse: false
            file_type: directory
          register: found_de_dirs

        - name: Display DE environment directories
          ansible.builtin.debug:
            var: found_de_dirs

        - name: Combine and sort environment directories
          ansible.builtin.set_fact:
            all_dirs: "{{ (found_ee_dirs.files + found_de_dirs.files) | sort(attribute='path') }}"

        - name: Display combined environment directories
          ansible.builtin.debug:
            var: all_dirs

        - name: Build menu options string
          ansible.builtin.set_fact:
            menu_options: |
              {% for item in all_dirs %}
              {{ loop.index }}: {{ item.path | basename }}
              {% endfor %}

        - name: Display menu options
          ansible.builtin.debug:
            msg: "{{ menu_options }}"

        - name: Prompt user for environment selection
          ansible.builtin.pause:
            prompt: |
              Select an environment (number):
              {{ menu_options }}
          register: user_selection

        - name: Set selected environment based on user input
          ansible.builtin.set_fact:
            selected_env: "{{ all_dirs[user_selection.user_input | int - 1].path }}"

        - name: Display selected environment
          ansible.builtin.debug:
            var: selected_env

    - name: Check if image already exists
      ansible.builtin.command:
        cmd: "podman images -q {{ selected_env | basename }}"
      register: image_exists
      changed_when: false

    - name: Handle image building
      block:
        - name: Prepare build environment
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - /tmp/ee-containers/_build
            - /tmp/ee-containers/context

        - name: Handle build result
          block:
            - name: Build EE container image
              ansible.builtin.command:
                cmd: >-
                  ansible-builder build
                  --tag {{ selected_env | basename }}
                  --container-runtime podman
                  --verbosity 2
                  --prune-images
                  --context {{ selected_env }}
                  -f {{ selected_env }}/execution-environment.yml
                creates: "/tmp/ee-containers/{{ selected_env | basename }}.tar"
              register: build_result
              failed_when: build_result.rc != 0
              when: image_exists.stdout == ""

            - name: Display build error
              when: build_result.rc != 0
              ansible.builtin.debug:
                msg: |
                  Build failed with return code {{ build_result.rc }}
                  STDOUT:
                  {{ build_result.stdout_lines | to_nice_yaml }}
                  STDERR:
                  {{ build_result.stderr_lines | to_nice_yaml }}

            - name: Clean up on build failure
              when: build_result.rc != 0
              block:
                - name: Remove build artifacts
                  ansible.builtin.file:
                    path: "{{ item }}"
                    state: absent
                  loop:
                    - "{{ selected_env }}/_build"
                    - "{{ selected_env }}/Containerfile"

                - name: Clean dangling images
                  ansible.builtin.shell:
                    cmd: |
                      set -o pipefail
                      podman images --filter "dangling=true" -q | xargs -r podman rmi -f
                      podman image prune -f
                  register: cleanup_result
                  changed_when: cleanup_result.stdout != ""
                  failed_when: false

                - name: Fail with build error message
                  ansible.builtin.fail:
                    msg: "Container build failed. See previous error messages."

    - name: Check if build log exists
      ansible.builtin.stat:
        path: /tmp/build.log
      register: build_log_file

    - name: Display build log
      ansible.builtin.command:
        cmd: cat /tmp/build.log
      register: build_log
      when: build_log_file.stat.exists
      changed_when: false

    - name: Display build log output
      ansible.builtin.debug:
        var: build_log.stdout
      when: build_log is defined and build_log.stdout is defined

    - name: Clean up build log
      ansible.builtin.file:
        path: /tmp/build.log
        state: absent
      changed_when: false
      when: build_log_file.stat.exists

    - name: List podman images
      ansible.builtin.command:
        cmd: ["podman", "images", "--format", "{% raw %}{{.Repository}}|{{.Tag}}|{{.ID}}|{{.Created}}|{{.Size}}{% endraw %}"]
      register: images
      changed_when: false

    - name: Display podman images
      ansible.builtin.debug:
        msg: |
          REPOSITORY          TAG         IMAGE ID      CREATED            SIZE
          {%- for line in images.stdout_lines -%}
          {%- set fields = line.split('|') -%}
          {{ "%-18s" | format(fields[0]) }}{{ "%-11s" | format(fields[1]) }}{{ "%-12s" | format(fields[2]) }}{{ "%-18s" | format(fields[3]) }}{{ fields[4] }}
          {%- endfor %}

    - name: Clean up dangling images
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          podman images --filter "dangling=true" -q | xargs -r podman rmi -f
          podman image prune -f
      register: cleanup_result
      changed_when: cleanup_result.stdout != ""
      failed_when: false
      tags:
        - cleanup
        - build
        - none

  handlers:
    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/build.log

    - name: Display pulled images status
      ansible.builtin.debug:
        msg: "Images already present or successfully pulled"

  post_tasks:

    - name: Restart podman
      ansible.builtin.service:
        name: podman
        state: restarted

    - name: Clean build artifacts and temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/ee-containers/_build"
        - "/tmp/ee-containers/context"
        - "/tmp/build.log"
        - "{{ selected_env }}/_build"
        - "{{ selected_env }}/Containerfile"
      failed_when: false
      when: selected_env is defined
