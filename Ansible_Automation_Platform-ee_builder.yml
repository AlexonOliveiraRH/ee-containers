---
# Ansible Automation Platform - Execution Environment Builder
# This playbook builds customized execution environments based on Red Hat AAP base images

# Play 1: Verify prerequisites
- name: Verify root privileges
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Check if running as root or with sudo
      ansible.builtin.command: id -u
      register: user_id
      changed_when: false

    - name: Fail if not running with proper privileges
      ansible.builtin.fail:
        msg: |
          This playbook must be run as root or with sudo privileges.
          Please run again using: sudo ansible-playbook Ansible_Automation_Platform-ee_builder.yml -K
      when: user_id.stdout != "0"

# Play 2: Display title and introduction
- name: Display title screen
  hosts: localhost
  connection: local
  gather_facts: false
  environment:
    ANSIBLE_LOCALHOST_WARNING: "False" 
    ANSIBLE_DEPRECATION_WARNINGS: "False"
    ANSIBLE_COMMAND_WARNINGS: "False"
    ANSIBLE_SYSTEM_WARNINGS: "False"
  tasks:
    - name: Clear screen before showing title
      ansible.builtin.shell: clear
      changed_when: false
      
    - name: Show title
      ansible.builtin.debug:
        msg: |
          ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
          │                                                                                      ..:-=@@@@=-:..          │
          │                                                                                    .*%@@@@@@@@@@@@%*.        │
          │                                                                                 .:@@@@@@@@@@@@@@@@@@@@:.     │
          │                                                                                .*@@@@@@@@@@*-@@@@@@@@@@*.    │
          │                                                                               .@@@@@@@@@@@*. =@@@@@@@@@@@.   │
          │                                                                              .%@@@@@@@@@@@ .@ +@@@@@@@@@@%.  │
          │                                                                              -%@@@@@@@@@@..@%-.*@@@@@@@@@%-  │
          │     "A Streamlined Approach to Building Ansible Execution Environments"     .+@@@@@@@@@@= =@@@.:@@@@@@@@@@+. │
          │                                                                             .+@@@@@@@@@@ ..:+@%.-@@@@@@@@@+. │
          │                                                                             .=@@@@@@@@@ .@@+. *+.-@@@@@@@%=  │
          │                                                                              .%@@@@@@@:.*@@@@%.  .+@@@@@@%.  │
          │                                                                               .@@@@@@= =@@@@@@@%=.:%@@@@@.   │
          │                                                                                :%@@@@@@@@@@@@@@@@@@@@@@%:    │
          │                                                                                 .*@@@@@@@@@@@@@@@@@@@@*.     │
          │                                                                                   .+@@@@@@@@@@@@@@@@+..      │
          │                                                                                     ..+*%@@@@@@%*+..         │
          └──────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

    - name: Pause for title screen
      ansible.builtin.pause:
        seconds: 3
        prompt: "Starting Execution Environment Builder..."

# Play 3: Main execution environment building process
- name: Build Execution Environments for Ansible Automation Platform
  hosts: localhost
  become: true
  gather_facts: true

  # Variables definition section
  vars:
    # Connection variables
    container_registries:
      - registry.redhat.io
      - console.redhat.com
      - registry.access.redhat.com
      - quay.io
      - registry.connect.redhat.com
    dns_servers:
      - '8.8.8.8'
      - '8.8.4.4'
    
    # Package and dependency variables
    required_packages:
      - python3-pip
      - ansible-builder
      - ansible-core
      - git
      - podman
      - podman-docker
      - tmux
      - xdg-utils
      - yum-utils
    
    # Always update the protected_images list in defaults/main.yml
    update_protected_list: true
    
    # Repository variables  
    git_repos:
      - url: 'https://github.com/cloin/ee-builds.git'
        dest: 'examples/ee-builds'
    work_dir: '/tmp/ee-containers'
    
    # Container image variables
    required_images:
      - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8
      - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9
      - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8
      - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9
      - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8
      - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9
      - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8
      - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9

  # Interactive variables
  vars_prompt:
    - name: rh_username
      prompt: "Enter your Red Hat CDN username"
      private: false
    - name: rh_password
      prompt: "Enter your Red Hat CDN password"
      private: true
    - name: distribution_selection
      prompt: "Select distribution to build images for (8/9/both)"
      private: false
      default: "both"
    - name: automation_hub_token
      prompt: "Enter your Automation Hub token (or press enter to skip)"
      private: true
    - name: galaxy_token
      prompt: "Enter your Galaxy token (or press enter to skip)"
      private: true
      default: ""

  # Setup tasks
  pre_tasks:
    #
    # SECTION 0: User Distribution Selection Processing
    #
    - name: Process distribution selection
      ansible.builtin.set_fact:
        build_rhel8: "{{ distribution_selection == '8' or distribution_selection == 'both' }}"
        build_rhel9: "{{ distribution_selection == '9' or distribution_selection == 'both' }}"
        
    - name: Show selected distributions
      ansible.builtin.debug:
        msg: "Building images for: {{ (build_rhel8 | bool) | ternary('RHEL 8', '') }}{{ (build_rhel8 and build_rhel9) | ternary(' and ', '') }}{{ (build_rhel9 | bool) | ternary('RHEL 9', '') }}"
    
    - name: Filter required images based on distribution selection
      ansible.builtin.set_fact:
        rhel8_images: "{{ required_images | select('search', 'rhel8') | list }}"
        rhel9_images: "{{ required_images | select('search', 'rhel9') | list }}"
        filtered_images: "{{ 
            (build_rhel8 | bool) | ternary(rhel8_images, []) + 
            (build_rhel9 | bool) | ternary(rhel9_images, [])
          }}"
        
    - name: Show filtered image list
      ansible.builtin.debug:
        msg: |
          Images selected for download:
          {% for image in filtered_images %}
          - {{ image }}
          {% endfor %}
      when: filtered_images | length > 0
        
    - name: Update required_images with filtered list
      ansible.builtin.set_fact:
        required_images: "{{ filtered_images }}"
      when: filtered_images is defined and filtered_images | length > 0

    #
    # SECTION 1: Base system configuration
    #
    - name: Detect RHEL version
      ansible.builtin.set_fact:
        rhel_version: "{{ ansible_distribution_major_version | default('9') }}"
      
    - name: Enable required RHEL repositories based on version
      block:
        - name: Enable RHEL 8 repositories
          ansible.builtin.command:
            cmd: "subscription-manager repos --enable={{ item }}"
          loop:
            - rhel-8-for-x86_64-supplementary-rpms
            - rhel-8-for-x86_64-appstream-rpms
            - rhel-8-for-x86_64-baseos-rpms
            - codeready-builder-for-rhel-8-x86_64-rpms
          register: repo_enable_rhel8
          changed_when: repo_enable_rhel8.rc == 0
          failed_when: false
          loop_control:
            label: "{{ item }}"
          when: rhel_version == '8' and build_rhel8 | bool
          
        - name: Enable RHEL 9 repositories
          ansible.builtin.command:
            cmd: "subscription-manager repos --enable={{ item }}"
          loop:
            - rhel-9-for-x86_64-supplementary-rpms
            - rhel-9-for-x86_64-appstream-rpms
            - rhel-9-for-x86_64-baseos-rpms
            - codeready-builder-for-rhel-9-x86_64-rpms
          register: repo_enable_rhel9
          changed_when: repo_enable_rhel9.rc == 0
          failed_when: false
          loop_control:
            label: "{{ item }}"
          when: rhel_version == '9' and build_rhel9 | bool
          
        - name: Check enabled repositories
          ansible.builtin.command:
            cmd: "subscription-manager repos --list-enabled"
          register: enabled_repos
          changed_when: false
          failed_when: false
          
        - name: Display enabled repositories
          ansible.builtin.debug:
            msg: |
              Currently enabled repositories for RHEL {{ rhel_version }}:
              {% for line in enabled_repos.stdout_lines %}
              {% if 'Repo ID:' in line %}
              - {{ line | regex_replace('^Repo ID:\\s+', '') }}
              {% endif %}
              {% endfor %}
          when: enabled_repos.rc == 0
      rescue:
        - name: Handle repository configuration failure
          ansible.builtin.debug:
            msg: "Warning: Failed to enable some repositories. Continuing with available repositories."
    
    #
    # SECTION 2: Package Installation and Verification
    #
    - name: Gather package facts 
      ansible.builtin.package_facts:
        manager: auto
      throttle: 1

    - name: Install build dependencies for required packages first
      ansible.builtin.command:
        cmd: "yum-builddep -y {{ item }}"
      loop: "{{ required_packages }}"
      register: builddep_results
      changed_when: builddep_results.rc == 0
      failed_when: false
      ignore_errors: true
      loop_control:
        label: "{{ item }}"
    
    - name: Install missing packages 
      ansible.builtin.package:
        name: "{{ required_packages | difference(ansible_facts.packages.keys() | list) }}"
        state: present
      when: (required_packages | difference(ansible_facts.packages.keys() | list)) | length > 0

    - name: Create directory structure
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "{{ playbook_dir }}/defaults"
        - "{{ playbook_dir }}/templates"
        - "{{ playbook_dir }}/scripts"
        - "{{ work_dir }}/_build/configs"
      
    - name: Create protected_images.j2 template if it doesn't exist
      ansible.builtin.copy:
        content: |
          # BEGIN ANSIBLE MANAGED PROTECTED IMAGES
          # This list is automatically generated from existing images
          # Images will NOT be deleted unless specifically selected from menu
          protected_images:
          {% raw %}{% for image in consolidated_images | default([]) %}
            - "{{ image }}"
          {% endfor %}{% endraw %}
          # END ANSIBLE MANAGED PROTECTED IMAGES
        dest: "templates/protected_images.j2"
        mode: '0644'
        force: false
    
    - name: Include setup tasks
      ansible.builtin.include_tasks: tasks/setup.yml
      register: setup_result

  # Main tasks 
  tasks:
    #
    # SECTION 3: DNS and Network Setup
    #
    - name: Verify DNS resolution
      ansible.builtin.command:
        cmd: "nslookup {{ item }}"
      loop:
        - github.com
        - cdn-ubi.redhat.com
        - galaxy.ansible.com
      register: dns_checks
      changed_when: false
      failed_when: false
      loop_control:
        label: "{{ item }}"

    - name: Set DNS servers for Podman
      ansible.builtin.template:
        src: templates/registries.conf.j2
        dest: /etc/containers/registries.conf
        mode: '0644'
        backup: true

    #
    # SECTION 4: Podman Configuration Reset
    #
    - name: Complete Podman storage system reset
      block:
        - name: Show critical error message
          ansible.builtin.debug:
            msg: |
              Performing complete system reset of Podman storage.
              This will delete all local container images and data!

        - name: Stop all Podman processes
          ansible.builtin.shell: |
            # Kill all running containers
            podman ps -qa | xargs -r podman kill
            podman ps -qa | xargs -r podman rm -f
            
            # Stop podman service
            systemctl stop podman.service podman.socket || true
            
            # Kill any remaining podman processes
            pkill -9 podman || true
          changed_when: true
          ignore_errors: true
          
        - name: Remove entire container configuration
          ansible.builtin.shell: |
            # Remove all container storage
            rm -rf /var/lib/containers/*
            rm -rf /run/containers/*
            rm -rf /run/libpod/*
            rm -rf /run/user/*/containers/*
            
            # Remove caches and temporary files
            rm -rf /root/.local/share/containers/*
            rm -rf /home/*/.local/share/containers/* || true
            rm -rf /tmp/containers-*
            rm -rf /tmp/libpod-*
            
            # Remove runtime files
            rm -f /run/libpod/runc*
          changed_when: true
          ignore_errors: true
          
        - name: Create basic container configuration files
          ansible.builtin.shell: |
            mkdir -p /etc/containers/containers.conf.d
            mkdir -p /etc/containers/storage.conf.d
            
            # Create base storage configuration
            cat > /etc/containers/storage.conf << EOF
            [storage]
            driver = "overlay"
            runroot = "/run/containers/storage"
            graphroot = "/var/lib/containers/storage"
            
            [storage.options]
            additionalimagestores = []
            
            [storage.options.overlay]
            mountopt = "nodev,metacopy=on"
            mount_program = "/usr/bin/fuse-overlayfs"
            ignore_chown_errors = "false"
            EOF
            
            # Create minimal registries configuration
            cat > /etc/containers/registries.conf << EOF
            [registries.search]
            registries = ['docker.io', 'registry.fedoraproject.org', 'registry.access.redhat.com', 'quay.io']
            
            [registries.insecure]
            registries = []
            
            [registries.block]
            registries = []
            EOF
          changed_when: true
          ignore_errors: true
          
        - name: Create container directory structure from scratch
          ansible.builtin.shell: |
            # Create essential directories with proper permissions
            mkdir -p /var/lib/containers/storage/overlay
            mkdir -p /var/lib/containers/storage/overlay-layers
            mkdir -p /var/lib/containers/storage/overlay-images
            mkdir -p /var/lib/containers/storage/vfs
            mkdir -p /var/lib/containers/storage/vfs-containers
            mkdir -p /var/lib/containers/storage/vfs-images
            mkdir -p /var/lib/containers/storage/vfs-layers
            mkdir -p /run/containers/storage
            
            # Set proper ownership
            chown -R root:root /var/lib/containers
            chown -R root:root /run/containers
          changed_when: true
          
        - name: Export environment variables to disable warnings
          ansible.builtin.shell: |
            # Add to environment
            export PODMAN_IGNORE_CGROUPSV1_WARNING=1
            
            # Add to current shell and .bashrc
            echo 'export PODMAN_IGNORE_CGROUPSV1_WARNING=1' >> ~/.bashrc
            
            # Create systemd override for podman service
            mkdir -p /etc/systemd/system/podman.service.d/
            cat > /etc/systemd/system/podman.service.d/environment.conf << EOF
            [Service]
            Environment=PODMAN_IGNORE_CGROUPSV1_WARNING=1
            EOF
            
            # Reload systemd to pick up changes
            systemctl daemon-reload
            systemctl restart podman.socket podman.service || true
          changed_when: true
    
    #
    # SECTION 5: Registry Authentication
    #
    - name: Setup Red Hat registry authentication
      block:
        - name: Verify podman is working properly
          ansible.builtin.command:
            cmd: "podman info --format 'Driver: {{ '{{' }} .Store.GraphDriverName {{ '}}' }}'"
          environment:
            PODMAN_IGNORE_CGROUPSV1_WARNING: "1"
          register: podman_check
          failed_when: podman_check.rc != 0
        
        - name: Initialize registry login tracking
          ansible.builtin.set_fact:
            registry_login_success: false
            registry_login_results: {}
        
        - name: Login to container registries
          ansible.builtin.command:
            cmd: "podman login --username {{ rh_username }} --password {{ rh_password }} {{ item }}"
          environment:
            PODMAN_IGNORE_CGROUPSV1_WARNING: "1"
          loop: "{{ container_registries }}"
          no_log: true
          register: registry_logins
          changed_when: registry_logins.rc == 0
          failed_when: false
          loop_control:
            label: "{{ item }}"
            
        - name: Process registry login results
          ansible.builtin.set_fact:
            registry_login_success: >-
              {{ registry_login_success or 
                 (item.item != 'quay.io' and item.rc == 0) }}
            registry_login_results: "{{ registry_login_results | combine({item.item: (item.rc == 0)}) }}"
          loop: "{{ registry_logins.results }}"
          loop_control:
            label: "{{ item.item }}"
            
        - name: Display registry login status
          ansible.builtin.debug:
            msg: |
              Registry Authentication Results:
              {% for registry, success in registry_login_results.items() %}
              - {{ registry }}: {{ 'SUCCESS' if success else 'FAILED' }}
              {% endfor %}
              
        - name: Fail if authentication failed for all critical registries
          ansible.builtin.fail:
            msg: |
              CRITICAL ERROR: Failed to authenticate with any required container registries.
              Authentication to at least one Red Hat registry is required for this playbook to function.
              Please check your Red Hat credentials and network connectivity.
          when: not registry_login_success

    #
    # SECTION 6: Builder Configuration
    #
    - name: Configure ansible-builder
      block:
        - name: Check if ansible-builder is already installed
          ansible.builtin.shell: which ansible-builder || echo "not found"
          register: ansible_builder_check
          changed_when: false

        - name: Install ansible-builder via pip if not found
          ansible.builtin.pip:
            name: ansible-builder
            state: present
            extra_args: "--user"
          when: "'not found' in ansible_builder_check.stdout"
          
        - name: Create ansible.cfg in build context
          ansible.builtin.template:
            src: templates/ansible.cfg.j2
            dest: "{{ work_dir }}/_build/configs/ansible.cfg"
            mode: '0644'
          vars:
            automation_hub_token: "{{ automation_hub_token | default('') }}"
            current_user: "{{ ansible_user_id | default('root') }}"

        - name: Copy ansible.cfg to system locations
          ansible.builtin.copy:
            src: "{{ work_dir }}/_build/configs/ansible.cfg"
            dest: "{{ item }}"
            mode: '0644'
            remote_src: true
          with_items:
            - /etc/ansible/ansible.cfg
            - "{{ playbook_dir }}/ansible.cfg"

    #
    # SECTION 7: Image Management
    #
    - name: Check and pull required container images
      block:
        - name: Check if required container images exist
          ansible.builtin.command:
            cmd: "podman image exists {{ item }}"
          environment:
            PODMAN_IGNORE_CGROUPSV1_WARNING: "1"
          loop: "{{ required_images }}"
          register: image_check_results
          changed_when: false
          failed_when: false
          loop_control:
            label: "{{ item }}"

        - name: Display missing images to pull
          ansible.builtin.set_fact:
            missing_images: "{{ image_check_results.results | selectattr('rc', 'defined') | selectattr('rc', 'ne', 0) | map(attribute='item') | list }}"

        - name: Pull missing container images
          ansible.builtin.command:
            cmd: "podman pull {{ item }}"
          environment:
            PODMAN_IGNORE_CGROUPSV1_WARNING: "1"
          loop: "{{ missing_images }}"
          register: pull_results
          changed_when: pull_results.rc == 0
          failed_when: false
          retries: 3
          delay: 5
          until: pull_results is succeeded
          loop_control:
            label: "{{ item }}"
            pause: 1.0
          when: missing_images | length > 0

        - name: Process image pull results
          ansible.builtin.set_fact:
            successful_pulls: "{{ pull_results.results | default([]) | selectattr('rc', 'defined') | selectattr('rc', 'eq', 0) | map(attribute='item') | list }}"
            failed_pulls: "{{ pull_results.results | default([]) | selectattr('rc', 'defined') | selectattr('rc', 'ne', 0) | map(attribute='item') | list }}"
          when: missing_images | length > 0

        - name: Summarize image pull results
          ansible.builtin.debug:
            msg: |
              Successfully pulled images:
              {% for image in successful_pulls | default([]) %}
              - {{ image }}
              {% endfor %}
              
              Failed to pull images:
              {% for image in failed_pulls | default([]) %}
              - {{ image }}
              {% endfor %}
          when: missing_images | length > 0

        - name: Fail if any required images could not be pulled
          ansible.builtin.fail:
            msg: |
              CRITICAL ERROR: Failed to pull the following required images:
              {% for image in failed_pulls | default([]) %}
              - {{ image }}
              {% endfor %}
              
              These images are required for execution environment building.
              Please check your network connection, registry authentication,
              and ensure these images are accessible.
          when: failed_pulls is defined and failed_pulls | length > 0
          
      rescue:
        - name: Critical failure in image pulling
          ansible.builtin.fail:
            msg: |
              CRITICAL ERROR: Failed to pull required container images.
              This playbook cannot continue without the necessary base images.
              
              Please verify:
              1. Registry authentication is working (podman login)
              2. Network connectivity to container registries
              3. The required images exist and are accessible

    #
    # SECTION 8: Dependencies Management
    #
    - name: Manage dependencies
      block:
        - name: Check if requirements.txt exists
          ansible.builtin.stat:
            path: "{{ work_dir }}/files/requirements.txt"
          register: requirements_txt

        - name: Install Python packages from requirements.txt
          ansible.builtin.pip:
            requirements: "{{ work_dir }}/files/requirements.txt"
            extra_args: "--upgrade"
          when: requirements_txt.stat.exists
          register: pip_install_result
          retries: 2
          delay: 3
          until: pip_install_result is succeeded
          failed_when: false

        - name: Check if requirements.yml exists
          ansible.builtin.stat:
            path: "{{ work_dir }}/files/requirements.yml"
          register: requirements_yml

        - name: Install ansible-galaxy collections
          ansible.builtin.command:
            cmd: ansible-galaxy collection install -r {{ work_dir }}/files/requirements.yml
          when: requirements_yml.stat.exists
          register: galaxy_install_result
          changed_when: galaxy_install_result.rc == 0
          failed_when: galaxy_install_result.rc != 0
          ignore_errors: true

    # 
    # SECTION 8.5: Environment Selection Filtering
    #
    - name: Filter available environments based on distribution selection
      block:
        - name: Get all available environments
          ansible.builtin.find:
            paths: "{{ work_dir }}/environments"
            file_type: directory
          register: all_environments
          
        - name: Process environments for filtering
          ansible.builtin.set_fact:
            rhel8_environments: "{{ all_environments.files | selectattr('path', 'search', 'rhel8') | map(attribute='path') | list }}"
            rhel9_environments: "{{ all_environments.files | selectattr('path', 'search', 'rhel9') | map(attribute='path') | list }}"
            neutral_environments: "{{ all_environments.files | rejectattr('path', 'search', 'rhel[89]') | map(attribute='path') | list }}"
            
        - name: Set available environments based on distribution selection
          ansible.builtin.set_fact:
            available_environments: "{{ 
                neutral_environments + 
                (build_rhel8 | bool) | ternary(rhel8_environments, []) + 
                (build_rhel9 | bool) | ternary(rhel9_environments, [])
              }}"
              
        - name: Debug available environments
          ansible.builtin.debug:
            msg: "Available environments based on distribution selection: {{ available_environments | map('basename') | list }}"
            
        # Pass the filtered environment list to the environment_menu.yml
        - name: Set environment_paths for menu
          ansible.builtin.set_fact:
            environment_paths: "{{ available_environments }}"
      when: build_rhel8 is defined or build_rhel9 is defined

    # 
    # Continue with environment selection, monitoring setup, etc.
    #
    - name: Include environment menu tasks
      ansible.builtin.include_tasks: tasks/environment_menu.yml
      register: environment_menu_result

    - name: Debug selected environments
      ansible.builtin.debug:
        msg: "Selected environments to process: {{ selected_environments | join(', ') }}"
      when: selected_environments | default([]) | length > 0

    - name: Build execution environments
      block:
        - name: Skip message if environment is not compatible with selected distributions
          ansible.builtin.debug:
            msg: "Skipping environment '{{ item }}' as it's not compatible with selected distributions."
          loop: "{{ selected_environments | default([]) }}"
          when: >
            (not build_rhel8 and 'rhel8' in item) or
            (not build_rhel9 and 'rhel9' in item)
          loop_control:
            label: "{{ item }}"
            
        - name: Build compatible selected environments
          ansible.builtin.include_tasks: tasks/build_environment.yml
          vars:
            environment_name: "{{ item }}"
          loop: "{{ selected_environments | default([]) }}"
          when: >
            (build_rhel8 and 'rhel8' in item) or
            (build_rhel9 and 'rhel9' in item) or
            ('rhel8' not in item and 'rhel9' not in item)
          loop_control:
            label: "{{ item }}"
