---
- name: Comprehensive Setup Playbook
  hosts: localhost
  become: true

  vars_prompt:
    - name: rh_username
      prompt: "Enter your Red Hat CDN username"
      private: false
    - name: rh_password
      prompt: "Enter your Red Hat CDN password"
      private: true

  pre_tasks:
    - name: Verify internet connection
      ansible.builtin.command:
        cmd: ping -c 4 google.com
      register: ping_result
      changed_when: false
      ignore_errors: true

    - name: Fail if no internet connection is detected
      ansible.builtin.fail:
        msg: "No internet connection detected."
      when: ping_result.rc != 0

    - name: Ensure required packages are installed via dnf
      ansible.builtin.dnf:
        name:
          - python3-pip
          - ansible-core
          - git
          - podman
          - ansible-dev-tools
          - podman-docker
          - podman-compose
          - podman-plugins
          - podman-remote
          - yum-utils
        state: present

    - name: dnf upgrade all packages
      ansible.builtin.dnf:
        name: '*'
        state: latest

    - name: Check if local environments directory exists
      ansible.builtin.stat:
        path: environments
      register: local_environments_dir

    - name: Check if local environments directory is empty
      ansible.builtin.find:
        paths: environments
        recurse: false
      register: local_environments_dir_content
      when: local_environments_dir.stat.exists

    - name: Ensure /tmp/ee-containers/environments directory exists
      ansible.builtin.file:
        path: /tmp/ee-containers/environments
        state: directory
        mode: '0755'

    - name: Check if /tmp/ee-containers/environments directory exists
      ansible.builtin.stat:
        path: /tmp/ee-containers/environments
      register: environments_dir

    - name: Check if /tmp/ee-containers/environments directory is empty
      ansible.builtin.find:
        paths: /tmp/ee-containers/environments
        recurse: false
      register: environments_dir_content
      when: environments_dir.stat.exists

    - name: Copy local environments directory to /tmp/ee-containers/environments/ if it does not exist or is empty
      ansible.builtin.copy:
        mode: '0755'
        src: environments/
        dest: /tmp/ee-containers/environments/
      when: not environments_dir.stat.exists or environments_dir_content.matched == 0

    - name: Clone GitHub repository to /tmp/ee-containers if environments directory does not exist or is empty
      ansible.builtin.git:
        repo: 'https://github.com/cloin/ee-builds.git'
        dest: /tmp/ee-containers/environments/
        version: 'main'  # Specify the branch or commit
        clone: true
        update: true
        force: true
      when: not environments_dir.stat.exists or environments_dir_content.matched == 0

    - name: Check if repository is already cloned in current directory
      ansible.builtin.stat:
        path: environments/.git
      register: repo_cloned_local

    - name: Clone GitHub repository to current directory if not already cloned
      ansible.builtin.git:
        repo: 'https://github.com/cloin/ee-builds.git'
        dest: environments/
        version: 'main'  # Specify the branch or commit
        clone: true
        update: true
        force: true
      when: not repo_cloned_local.stat.exists and not local_environments_dir.stat.exists

  tasks:
    - name: Login to registry.redhat.io
      ansible.builtin.command:
        cmd: "podman login -u {{ rh_username }} -p {{ rh_password }} registry.redhat.io"
      changed_when: false

    - name: Login to console.redhat.com
      ansible.builtin.command:
        cmd: "podman login -u {{ rh_username }} -p {{ rh_password }} console.redhat.com"
      changed_when: false

    - name: Check if requirements.txt exists
      ansible.builtin.stat:
        path: /tmp/ee-containers/files/requirements.txt
      register: requirements_txt

    - name: Install Python packages from requirements.txt if it exists
      ansible.builtin.pip:
        requirements: /tmp/ee-containers/files/requirements.txt
      when: requirements_txt.stat.exists

    - name: Check if requirements.yml exists
      ansible.builtin.stat:
        path: /tmp/ee-containers/files/requirements.yml
      register: requirements_yml

    - name: Install ansible-galaxy collections from requirements.yml if it exists
      ansible.builtin.command:
        cmd: "ansible-galaxy collection install -r /tmp/ee-containers/files/requirements.yml"
        creates: "/root/.ansible/collections/ansible_collections"
      when: requirements_yml.stat.exists
      failed_when: requirements_yml.rc != 0

    - name: Ensure /tmp/ee-containers/_build/configs directory exists
      ansible.builtin.file:
        path: /tmp/ee-containers/_build/configs
        state: directory
        mode: '0755'

    - name: Check if ansible.cfg exists in /tmp/ee-containers/_build/configs
      ansible.builtin.stat:
        path: /tmp/ee-containers/_build/configs/ansible.cfg
      register: ansible_cfg

    - name: Copy ansible.cfg to /tmp/ee-containers/_build/configs if it does not exist
      ansible.builtin.copy:
        src: /tmp/ee-containers/templates/ansible.cfg.j2
        dest: /tmp/ee-containers/_build/configs/ansible.cfg
        mode: '0644'
      when: not ansible_cfg.stat.exists

    - name: Verify DNS resolution for github.com
      ansible.builtin.command:
        cmd: nslookup github.com
      register: nslookup_github_result
      changed_when: false

    - name: Fail if DNS resolution for github.com fails
      ansible.builtin.fail:
        msg: "DNS resolution for github.com failed."
      when: nslookup_github_result.rc != 0

    - name: Verify DNS resolution for cdn-ubi.redhat.com
      ansible.builtin.command:
        cmd: nslookup cdn-ubi.redhat.com
      register: nslookup_redhat_result
      changed_when: false

    - name: Fail if DNS resolution for cdn-ubi.redhat.com fails
      ansible.builtin.fail:
        msg: "DNS resolution for cdn-ubi.redhat.com failed."
      when: nslookup_redhat_result.rc != 0

    - name: Verify DNS resolution for galaxy.ansible.com
      ansible.builtin.command:
        cmd: nslookup galaxy.ansible.com
      register: nslookup_galaxy_result
      changed_when: false

    - name: Fail if DNS resolution for galaxy.ansible.com fails
      ansible.builtin.fail:
        msg: "DNS resolution for galaxy.ansible.com failed."
      when: nslookup_galaxy_result.rc != 0

    - name: Set DNS servers for Podman
      ansible.builtin.copy:
        dest: /etc/containers/registries.conf
        content: |
          [registries.search]
          registries = ['docker.io', 'quay.io', 'registry.fedoraproject.org', 'registry.access.redhat.com', 'registry.redhat.io']

          [registries.insecure]
          registries = []

          [registries.block]
          registries = []

          [registries]
          registries = ['docker.io', 'quay.io', 'registry.fedoraproject.org', 'registry.access.redhat.com', 'registry.redhat.io']

          [engine]
          dns_servers = ['8.8.8.8', '8.8.4.4']
        mode: '0644'

    - name: Build a numeric menu for the user to select environment
      block:
        - name: Find EE environment directories
          ansible.builtin.find:
            paths: "environments/"
            patterns: "ee-*"
            recurse: false
            file_type: directory
          register: found_ee_dirs

        - name: Display EE environment directories
          ansible.builtin.debug:
            var: found_ee_dirs

        - name: Find DE environment directories
          ansible.builtin.find:
            paths: "environments/"
            patterns: "de-*"
            recurse: false
            file_type: directory
          register: found_de_dirs

        - name: Display DE environment directories
          ansible.builtin.debug:
            var: found_de_dirs

        - name: Combine and sort environment directories
          ansible.builtin.set_fact:
            all_dirs: "{{ (found_ee_dirs.files + found_de_dirs.files) | sort(attribute='path') }}"

        - name: Display combined environment directories
          ansible.builtin.debug:
            var: all_dirs

        - name: Build menu options string
          ansible.builtin.set_fact:
            menu_options: |
              {% for item in all_dirs %}
              {{ loop.index }}: {{ item.path | basename }}
              {% endfor %}

        - name: Display menu options
          ansible.builtin.debug:
            msg: "{{ menu_options }}"

        - name: Prompt user for environment selection
          ansible.builtin.pause:
            prompt: |
              Select an environment (number):
              {{ menu_options }}
          register: user_selection

        - name: Set selected environment based on user input
          ansible.builtin.set_fact:
            selected_env: "{{ all_dirs[user_selection.user_input | int - 1].path }}"

        - name: Display selected environment
          ansible.builtin.debug:
            var: selected_env

    - name: Ensure repository configuration directory exists
      ansible.builtin.file:
        path: "{{ selected_env }}/repos.d"
        state: directory
        mode: '0755'

    - name: Create UBI 9 BaseOS repository configuration file
      ansible.builtin.copy:
        dest: "{{ selected_env }}/repos.d/ubi-9-baseos.repo"
        content: |
          [ubi-9-baseos-rpms]
          name=Red Hat Universal Base Image 9 BaseOS
          baseurl=https://cdn-ubi.redhat.com/content/public/ubi/dist/ubi9/9/x86_64/baseos/os/
          enabled=1
          gpgcheck=1
          gpgkey=https://access.redhat.com/security/pki/keys/redhat/redhat-ubi-9-key.pub
        mode: '0644'

    - name: Create UBI 9 AppStream repository configuration file
      ansible.builtin.copy:
        dest: "{{ selected_env }}/repos.d/ubi-9-appstream.repo"
        content: |
          [ubi-9-appstream-rpms]
          name=Red Hat Universal Base Image 9 AppStream
          baseurl=https://cdn-ubi.redhat.com/content/public/ubi/dist/ubi9/9/x86_64/appstream/os/
          enabled=1
          gpgcheck=1
          gpgkey=https://access.redhat.com/security/pki/keys/redhat/redhat-ubi-9-key.pub
        mode: '0644'

    - name: Check if image already exists
      ansible.builtin.command:
        cmd: "podman images -q {{ selected_env | basename }}"
      register: image_exists
      changed_when: false

    - name: Start image build process in the background if image does not exist
      ansible.builtin.shell: |
        nohup /usr/local/bin/ansible-builder build --prune-images --no-cache -v3 \
        -f {{ selected_env }}/execution-environment.yml --context /tmp/ee-containers \
        --tag {{ selected_env | basename }} > /tmp/build.log 2>&1 & echo $!
      when: image_exists.stdout == ""
      register: build_pid
      changed_when: false

    - name: Monitor build process and tee log to console
      ansible.builtin.shell: |
        while ps -p {{ build_pid.stdout }} > /dev/null 2>&1; do
          tail -n +1 /tmp/build.log
          sleep 10
        done
      async: 2800  # Increased timeout to 30 minutes
      poll: 10
      changed_when: false

    - name: Display build log
      ansible.builtin.command:
        cmd: cat /tmp/build.log
      changed_when: false
      register: build_log

    - name: Display build log output
      ansible.builtin.debug:
        var: build_log.stdout

    - name: Clean up build log
      ansible.builtin.file:
        path: /tmp/build.log
        state: absent
      changed_when: false

    - name: List podman images
      ansible.builtin.command:
        cmd: podman images
      changed_when: false
      register: images
