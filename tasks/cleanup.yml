---
- name: Create consolidated protected images list
  ansible.builtin.set_fact:
    protected_images: >-
      {{
        [
          'registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8:latest',
          'registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9:latest',
          'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest',
          'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9:latest',
          'registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest',
          'registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest',
          'registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest',
          'registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9:latest'
        ] + (selected_environments | default([]))
      }}

- name: Update protected images list with any new entries
  ansible.builtin.set_fact:
    consolidated_images: "{{ ((protected_images | default([])) + (selected_environments | default([])) + (required_images | default([]))) | unique | sort }}"

- name: Write updated protected images to defaults/main.yml
  ansible.builtin.template:
    src: templates/protected_images.j2
    dest: "defaults/main.yml"
  delegate_to: localhost
  when: update_protected_list | default(false) | bool

- name: Clean up unprotected images only when specifically selected
  block:
    - name: Begin cleanup of unprotected images
      ansible.builtin.debug:
        msg: "Starting cleanup of unprotected images"
      when: cleanup_all | default(false) | bool

    - name: Clean up unprotected images
      ansible.builtin.shell: |
        images_to_check=$(podman images --format '{{ .Repository }}:{{ .Tag }}' | grep -v "<none>:<none>")
        images_to_remove=""
        for image in $images_to_check; do
          is_protected=false
          {% for protected in consolidated_images | default([]) %}
          if [[ "$image" == "{{ protected }}" ]]; then
            is_protected=true
            {% if selected_environments is defined %}
            if [[ "{{ selected_environments | join(' ') }}" == *"$image"* ]]; then
              is_protected=false
            fi
            {% endif %}
          fi
          {% endfor %}
          if [[ "$is_protected" == "false" ]]; then
            images_to_remove="$images_to_remove $image"
          fi
        done
        if [[ -n "$images_to_remove" ]]; then
          podman rmi -f $images_to_remove
          echo "Removing unprotected images: $images_to_remove"
        else
          echo "No unprotected images to remove"
        fi
      args:
        executable: /bin/bash
      when: cleanup_all | default(false) | bool
      register: cleanup_result
      changed_when: cleanup_result.stdout is search('Removing')

- name: Include protected images from defaults
  ansible.builtin.include_vars:
    file: "defaults/main.yml"
    name: protected_images_var
    
- name: Set protected images variable
  ansible.builtin.set_fact:
    protected_images: "{{ protected_images_var.protected_images }}"

# BEGIN ANSIBLE MANAGED PROTECTED IMAGES
# This list is automatically generated from existing images
# Images will NOT be deleted unless specifically selected from menu
protected_images:
  - "ghcr.io/ansible/community-ansible-dev-tools:latest"
  - "registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8:latest"
  - "registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9:latest"
  - "registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest"
  - "registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9:latest"
  - "registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest"
  - "registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest"
  - "registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest"
  - "registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9:latest"
# END ANSIBLE MANAGED PROTECTED IMAGES
