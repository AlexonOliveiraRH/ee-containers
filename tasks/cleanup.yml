---
# Add a task to check for existing images first
- name: Check for existing images
  ansible.builtin.command:
    cmd: "podman images --format '{% raw %}{{ .Repository }}:{{ .Tag }}{% endraw %}'"
  register: existing_images
  changed_when: false

- name: Set existing images fact
  ansible.builtin.set_fact:
    existing_image_list: "{{ existing_images.stdout_lines | default([]) }}"

- name: Create consolidated protected images list
  ansible.builtin.set_fact:
    protected_images: >-
      {{
        [
          'registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8:latest',
          'registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9:latest',
          'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest',
          'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9:latest',
          'registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest',
          'registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest',
          'registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest',
          'registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9:latest'
        ] + (existing_image_list | default([]))
      }}

- name: Update consolidated images list
  ansible.builtin.set_fact:
    consolidated_images: "{{ ((protected_images | default([])) + (selected_environments | default([])) + (required_images | default([])) + (existing_image_list | default([]))) | unique | sort }}"

- name: Write updated protected images to defaults/main.yml
  ansible.builtin.template:
    src: templates/protected_images.j2
    dest: "defaults/main.yml"
  delegate_to: localhost
  when: update_protected_list | default(false) | bool

- name: Clean up unprotected images only when specifically selected
  ansible.builtin.block:
    - name: Begin cleanup of unprotected images
      ansible.builtin.debug:
        msg: "Starting cleanup of unprotected images"
      when: cleanup_all | default(false) | bool

    - name: Get list of all container images
      ansible.builtin.command:
        cmd: "podman images --format '{% raw %}{{ .Repository }}:{{ .Tag }}{% endraw %}' | grep -v '<none>:<none>'"
      register: all_images
      changed_when: false
      when: cleanup_all | default(false) | bool
      
    - name: Identify unprotected images
      ansible.builtin.set_fact:
        unprotected_images: "{{ all_images.stdout_lines | default([]) | difference(consolidated_images | default([])) }}"
      when: cleanup_all | default(false) | bool
      
    - name: Show images that would be removed (dry run)
      ansible.builtin.debug:
        msg: >
          Would remove these unprotected images: 
          {{ unprotected_images | join(', ') if unprotected_images | length > 0 else 'None' }}
      when: 
        - cleanup_all | default(false) | bool
        - unprotected_images | length > 0
        
    - name: Remove unprotected images
      ansible.builtin.command:
        cmd: "podman rmi -f {{ item }}"
      with_items: "{{ unprotected_images }}"
      register: removal_results
      changed_when: removal_results.rc == 0
      when:
        - cleanup_all | default(false) | bool
        - confirm_cleanup | default('no') == 'yes'
        - unprotected_images | length > 0
        
    - name: Report removal status
      ansible.builtin.debug:
        msg: >
          {{ 'Removed ' + (unprotected_images | length | string) + ' unprotected images' 
             if confirm_cleanup | default('no') == 'yes' and unprotected_images | length > 0
             else 'Dry run - no images removed. Set confirm_cleanup=yes to remove.' }}
      when: 
        - cleanup_all | default(false) | bool
        - unprotected_images | length > 0
        
    - name: Report no unprotected images
      ansible.builtin.debug:
        msg: "No unprotected images to remove"
      when:
        - cleanup_all | default(false) | bool
        - unprotected_images | length == 0

- name: Include protected images from defaults
  ansible.builtin.include_vars:
    file: "defaults/main.yml"
    name: protected_images_var
    
- name: Set protected images variable
  ansible.builtin.set_fact:
    protected_images: "{{ protected_images_var.protected_images }}"
