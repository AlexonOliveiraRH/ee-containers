---
- name: Set current user for sudo privileges
  ansible.builtin.set_fact:
    current_user: "{{ lookup('env', 'USER') | default('root') }}"

#- name: Grant sudo privileges to current user
#  ansible.builtin.lineinfile:
#    path: "/etc/sudoers.d/{{ current_user }}"
#    line: "{{ current_user }} ALL=(ALL) NOPASSWD: ALL"
#    create: yes
#    mode: '0440'
#    validate: 'visudo -cf %s'
#  become: true

- name: Create ansible.cfg in base directory from template
  ansible.builtin.template:
    src: templates/ansible.cfg.j2
    dest: "ansible.cfg"
    mode: '0644'
  vars:
    current_usersudo: "{{ lookup('env', 'USER') | default('root') }}"
  become: false
  register: base_config_result

- name: Validate environment requirements
  ansible.builtin.block:
    - name: Check if podman is installed
      ansible.builtin.command:
        cmd: which podman
      register: podman_check
      changed_when: false
      failed_when: false
      
    - name: Fail if podman is not installed
      ansible.builtin.fail:
        msg: "Podman is not installed. Please install podman before continuing."
      when: podman_check.rc != 0
      
    - name: Verify internet connectivity
      ansible.builtin.uri:
        url: https://google.com
        method: GET
      register: connectivity_check
      failed_when: connectivity_check.status != 200
      changed_when: false
  tags: [validation, setup]

- name: Verify internet connectivity
  ansible.builtin.uri:
    url: https://google.com
    method: GET
  register: connectivity_check
  failed_when: connectivity_check.status != 200
  changed_when: false
  tags: [connectivity, validation]

- name: Fail if no internet connection is detected
  ansible.builtin.fail:
    msg: "No internet connection detected."
  when: connectivity_check.status != 200

- name: Install required packages
  ansible.builtin.package:
    name: "{{ required_packages }}"
    state: present
  tags: [packages, installation]

- name: Ensure container policy directory exists
  ansible.builtin.file:
    path: /etc/containers/policy.d
    state: directory
    mode: '0755'

- name: Create container policy file
  ansible.builtin.template:
    src: templates/container_policy.json.j2
    dest: /etc/containers/policy.d/default.json
    mode: '0644'

- name: Check if repositories exist
  ansible.builtin.stat:
    path: "{{ item.dest }}"
  register: repo_exists
  with_items: "{{ git_repos }}"

- name: Clone repositories (ignoring errors)
  ansible.builtin.block:
    - name: Clone repository
      ansible.builtin.git:
        repo: "{{ item.item.url }}"
        dest: "{{ item.item.dest }}"
        version: 'main'
        clone: true
        update: true
        force: true
      when: not item.stat.exists
      with_items: "{{ repo_exists.results }}"
  ansible.builtin.rescue:
    - name: Display repository clone failure
      ansible.builtin.debug:
        msg: "Failed to clone repository {{ item.item.url }}. Continuing with playbook..."
      with_items: "{{ repo_exists.results }}"

- name: Install required collections
  ansible.builtin.ansible_galaxy_collection:
    name: community.general
    state: present
  changed_when: false

- name: Gather system information
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - 'min'
  tags: [setup, system_info]
