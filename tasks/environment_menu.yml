---
# Environment Selection Menu

- name: Ensure environments directory exists
  ansible.builtin.file:
    path: "environments"
    state: directory
    mode: '0755'
  tags: [setup, directories]

- name: Display environment filter information
  ansible.builtin.debug:
    msg: |
      Distribution filter active: {{ (build_rhel8 | bool) | ternary('RHEL 8', '') }}{{ (build_rhel8 and build_rhel9) | ternary(' and ', '') }}{{ (build_rhel9 | bool) | ternary('RHEL 9', '') }}
  tags: [display, filters]

- name: Check if environment_paths is defined and not empty
  ansible.builtin.debug:
    msg: "Environment paths received: {{ environment_paths | default([]) | length }} paths"
    verbosity: 1

- name: Find environment directories directly
  ansible.builtin.find:
    paths: "environments"
    file_type: directory
  register: found_environments

- name: Debug found environments
  ansible.builtin.debug:
    msg: "Found environments: {{ found_environments.files | map(attribute='path') | map('basename') | list }}"
    verbosity: 1

- name: Extract environment basenames
  ansible.builtin.set_fact:
    all_environment_names: "{{ found_environments.files | map(attribute='path') | map('basename') | list }}"

- name: Filter RHEL 8 environments
  ansible.builtin.set_fact:
    rhel8_environments: "{{ all_environment_names | select('search', 'rhel8') | list }}"
  when: build_rhel8 | bool

- name: Filter RHEL 9 environments
  ansible.builtin.set_fact:
    rhel9_environments: "{{ all_environment_names | select('search', 'rhel9') | list }}"
  when: build_rhel9 | bool

- name: Set final environment list based on distribution selection
  ansible.builtin.set_fact:
    environment_names: >-
      {% if build_rhel8 and build_rhel9 %}
      {{ all_environment_names }}
      {% elif build_rhel8 %}
      {{ rhel8_environments | default([]) }}
      {% elif build_rhel9 %}
      {{ rhel9_environments | default([]) }}
      {% else %}
      {{ all_environment_names }}
      {% endif %}

- name: Show filtered environment names
  ansible.builtin.debug:
    msg: |
      Filtered environments for {{ (build_rhel8 | bool) | ternary('RHEL 8', '') }}{{ (build_rhel8 and build_rhel9) | ternary(' and ', '') }}{{ (build_rhel9 | bool) | ternary('RHEL 9', '') }}:
      {% for env in environment_names %}
      - {{ env }}
      {% endfor %}

- name: Check if any environments are available
  ansible.builtin.fail:
    msg: |
      No environment directories matching your distribution selection were found.
      
      Distribution filter: {{ (build_rhel8 | bool) | ternary('RHEL 8', '') }}{{ (build_rhel8 and build_rhel9) | ternary(' and ', '') }}{{ (build_rhel9 | bool) | ternary('RHEL 9', '') }}
      
      Available directories that didn't match your filter:
      {% for env in found_environments.files | map(attribute='path') | map('basename') | list %}
      - {{ env }}
      {% endfor %}
      
      To see all environments, select 'both' for the distribution selection.
  when: environment_names | length == 0

- name: Display environment selection menu header
  ansible.builtin.debug:
    msg: |
      **************************************************
      ENVIRONMENT SELECTION MENU
      
      Selected distribution: {{ (build_rhel8 | bool) | ternary('RHEL 8', '') }}{{ (build_rhel8 and build_rhel9) | ternary(' and ', '') }}{{ (build_rhel9 | bool) | ternary('RHEL 9', '') }}
      Showing {{ environment_names | length }} compatible environments
      **************************************************

- name: Prompt for environment selection
  ansible.builtin.pause:
    prompt: |
      **************************************************
      ENVIRONMENT SELECTION MENU
      
      Selected distribution: {{ (build_rhel8 | bool) | ternary('RHEL 8', '') }}{{ (build_rhel8 and build_rhel9) | ternary(' and ', '') }}{{ (build_rhel9 | bool) | ternary('RHEL 9', '') }}
      
      Available environments:
      {% for env_name in environment_names %}
      {{ loop.index }}. {{ env_name }}
      {% endfor %}
      **************************************************

      Enter numbers for environments to build (comma-separated, max {{ environment_names | length }})
      Enter 'all' to select all environments
      Enter 'q' to quit without selecting
  register: env_selection
  
- name: Process environment selection
  ansible.builtin.set_fact:
    selected_indices: "{{ env_selection.user_input.split(',') | map('trim') | select('match', '^[0-9]+$') | map('int') | select('<=', environment_names | length) | select('>=', 1) | list }}"
    select_all: "{{ env_selection.user_input | trim | lower == 'all' }}"
    quit_selection: "{{ env_selection.user_input | trim | lower == 'q' }}"

- name: Select all environments when requested
  ansible.builtin.set_fact:
    selected_environments: "{{ environment_names }}"
  when: select_all | bool

- name: Convert indices to environment names
  ansible.builtin.set_fact:
    selected_environments: "{{ [] }}"

- name: Add each selected environment by index
  ansible.builtin.set_fact:
    selected_environments: "{{ selected_environments + [environment_names[item-1]] }}"
  loop: "{{ selected_indices }}"
  when: 
    - selected_indices | length > 0 
    - not select_all | bool 
    - not quit_selection | bool
    - item >= 1
    - item <= environment_names | length

- name: Set empty selection when nothing valid was entered or quit selected
  ansible.builtin.set_fact:
    selected_environments: []
  when: (selected_indices | default([]) | length == 0 and not select_all | bool) or quit_selection | bool

- name: Show selected environments
  ansible.builtin.debug:
    msg: |
      Selected environments for building: 
      {% for env in selected_environments %}
      - {{ env }}
      {% endfor %}
  when: selected_environments | length > 0
  tags: [display, selection]

- name: Report no environments selected
  ansible.builtin.debug:
    msg: "No environments selected for building."
  when: selected_environments | length == 0
  tags: [display, selection]
